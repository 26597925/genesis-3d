
/*  A Bison parser, made from hlslang.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	ATTRIBUTE	258
#define	CONST_QUAL	259
#define	STATIC_QUAL	260
#define	BOOL_TYPE	261
#define	FLOAT_TYPE	262
#define	INT_TYPE	263
#define	STRING_TYPE	264
#define	FIXED_TYPE	265
#define	HALF_TYPE	266
#define	BREAK	267
#define	CONTINUE	268
#define	DO	269
#define	ELSE	270
#define	FOR	271
#define	IF	272
#define	DISCARD	273
#define	RETURN	274
#define	BVEC2	275
#define	BVEC3	276
#define	BVEC4	277
#define	IVEC2	278
#define	IVEC3	279
#define	IVEC4	280
#define	VEC2	281
#define	VEC3	282
#define	VEC4	283
#define	HVEC2	284
#define	HVEC3	285
#define	HVEC4	286
#define	FVEC2	287
#define	FVEC3	288
#define	FVEC4	289
#define	MATRIX2	290
#define	MATRIX3	291
#define	MATRIX4	292
#define	HMATRIX2	293
#define	HMATRIX3	294
#define	HMATRIX4	295
#define	FMATRIX2	296
#define	FMATRIX3	297
#define	FMATRIX4	298
#define	IN_QUAL	299
#define	OUT_QUAL	300
#define	INOUT_QUAL	301
#define	UNIFORM	302
#define	VARYING	303
#define	STRUCT	304
#define	VOID_TYPE	305
#define	WHILE	306
#define	SAMPLER1D	307
#define	SAMPLER2D	308
#define	SAMPLER3D	309
#define	SAMPLERCUBE	310
#define	SAMPLER1DSHADOW	311
#define	SAMPLER2DSHADOW	312
#define	SAMPLERRECT	313
#define	SAMPLERGENERIC	314
#define	VECTOR	315
#define	MATRIX	316
#define	REGISTER	317
#define	TEXTURE	318
#define	SAMPLERSTATE	319
#define	IDENTIFIER	320
#define	TYPE_NAME	321
#define	FLOATCONSTANT	322
#define	INTCONSTANT	323
#define	BOOLCONSTANT	324
#define	STRINGCONSTANT	325
#define	FIELD_SELECTION	326
#define	LEFT_OP	327
#define	RIGHT_OP	328
#define	INC_OP	329
#define	DEC_OP	330
#define	LE_OP	331
#define	GE_OP	332
#define	EQ_OP	333
#define	NE_OP	334
#define	AND_OP	335
#define	OR_OP	336
#define	XOR_OP	337
#define	MUL_ASSIGN	338
#define	DIV_ASSIGN	339
#define	ADD_ASSIGN	340
#define	MOD_ASSIGN	341
#define	LEFT_ASSIGN	342
#define	RIGHT_ASSIGN	343
#define	AND_ASSIGN	344
#define	XOR_ASSIGN	345
#define	OR_ASSIGN	346
#define	SUB_ASSIGN	347
#define	LEFT_PAREN	348
#define	RIGHT_PAREN	349
#define	LEFT_BRACKET	350
#define	RIGHT_BRACKET	351
#define	LEFT_BRACE	352
#define	RIGHT_BRACE	353
#define	DOT	354
#define	COMMA	355
#define	COLON	356
#define	EQUAL	357
#define	SEMICOLON	358
#define	BANG	359
#define	DASH	360
#define	TILDE	361
#define	PLUS	362
#define	STAR	363
#define	SLASH	364
#define	PERCENT	365
#define	LEFT_ANGLE	366
#define	RIGHT_ANGLE	367
#define	VERTICAL_BAR	368
#define	CARET	369
#define	AMPERSAND	370
#define	QUESTION	371

#line 9 "hlslang.y"


/* Based on:
ANSI C Yacc grammar

In 1985, Jeff Lee published his Yacc grammar (which is accompanied by a 
matching Lex specification) for the April 30, 1985 draft version of the 
ANSI C standard.  Tom Stockfisch reposted it to net.sources in 1987; that
original, as mentioned in the answer to question 17.25 of the comp.lang.c
FAQ, can be ftp'ed from ftp.uu.net, file usenet/net.sources/ansi.c.grammar.Z.
 
I intend to keep this version as close to the current C Standard grammar as 
possible; please let me know if you discover discrepancies. 

Jutta Degener, 1995 
*/

#include "SymbolTable.h"
#include "ParseHelper.h"
#include "../../include/hlsl2glsl.h"

#ifdef _WIN32
#undef _WIN32
#endif

#ifdef _WIN32
    #define YYPARSE_PARAM parseContext
    #define YYPARSE_PARAM_DECL TParseContext&
    #define YY_DECL int yylex(YYSTYPE* pyylval, TParseContext& parseContext)
    #define YYLEX_PARAM parseContext
#else
    #define YYPARSE_PARAM parseContextLocal
	#define YYPARSE_PARAM_DECL void *
    #define parseContext (*((TParseContext*)(parseContextLocal)))
    #define YY_DECL int yylex(YYSTYPE* pyylval, void* parseContextLocal)
    #define YYLEX_PARAM (void*)(parseContextLocal)
    extern void yyerror(char*);    
#endif

#define FRAG_VERT_ONLY(S, L) {                                                  \
    if (parseContext.language != EShLangFragment &&                             \
        parseContext.language != EShLangVertex) {                               \
        parseContext.error(L, " supported in vertex/fragment shaders only ", S, "", "");   \
        parseContext.recover();                                                            \
    }                                                                           \
}

#define VERTEX_ONLY(S, L) {                                                     \
    if (parseContext.language != EShLangVertex) {                               \
        parseContext.error(L, " supported in vertex shaders only ", S, "", "");            \
        parseContext.recover();                                                            \
    }                                                                           \
}

#define FRAG_ONLY(S, L) {                                                       \
    if (parseContext.language != EShLangFragment) {                             \
        parseContext.error(L, " supported in fragment shaders only ", S, "", "");          \
        parseContext.recover();                                                            \
    }                                                                           \
}

#define UNSUPPORTED_FEATURE(S, L) {                                                       \
    parseContext.error(L, " not supported ", S, "", "");              \
    parseContext.recover();                                                            \
}

#define SET_BASIC_TYPE(RES,PAR,T,PREC) \
	TQualifier qual = parseContext.getDefaultQualifier(); \
	(RES).setBasic(T, qual, (PAR).line); \
	(RES).precision = PREC



#line 82 "hlslang.y"
typedef union {
    struct {
        TSourceLoc line;
        union {
            TString *string;
            float f;
            int i;
            bool b;
        };
        TSymbol* symbol;
    } lex;
    struct {
        TSourceLoc line;
        TOperator op;
        union {
            TIntermNode* intermNode;
            TIntermNodePair nodePair;
            TIntermTyped* intermTypedNode;
            TIntermAggregate* intermAggregate;
        };
        union {
            TPublicType type;
            TQualifier qualifier;
            TFunction* function;
            TParameter param;
            TTypeLine typeLine;
            TTypeList* typeList;
	    TAnnotation* ann;
	    TTypeInfo* typeInfo;
        };
    } interm;
} YYSTYPE;
#line 115 "hlslang.y"

#ifndef _WIN32
    extern int yylex(YYSTYPE*, void*);
#endif

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		474
#define	YYFLAG		-32768
#define	YYNTBASE	117

#define YYTRANSLATE(x) ((unsigned)(x) <= 371 ? yytranslate[x] : 209)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    10,    14,    16,    21,    23,
    27,    30,    33,    35,    37,    39,    43,    46,    49,    52,
    54,    57,    61,    64,    66,    68,    70,    72,    75,    78,
    81,    86,    88,    90,    92,    94,    96,   100,   104,   108,
   110,   114,   118,   120,   124,   128,   130,   134,   138,   142,
   146,   148,   152,   156,   158,   162,   164,   168,   170,   174,
   176,   180,   182,   186,   188,   192,   194,   200,   202,   206,
   208,   210,   212,   214,   216,   218,   220,   222,   224,   226,
   228,   230,   234,   236,   239,   242,   245,   250,   252,   254,
   257,   261,   265,   268,   273,   277,   282,   288,   296,   300,
   303,   307,   310,   311,   313,   315,   317,   319,   321,   326,
   333,   341,   350,   360,   367,   369,   373,   379,   386,   394,
   403,   409,   411,   414,   416,   418,   421,   423,   425,   427,
   429,   434,   436,   438,   440,   442,   444,   446,   453,   460,
   467,   469,   471,   473,   475,   477,   479,   481,   483,   485,
   487,   489,   491,   493,   495,   497,   499,   501,   503,   505,
   507,   509,   511,   513,   515,   517,   519,   521,   523,   525,
   527,   529,   531,   533,   535,   537,   543,   548,   550,   553,
   557,   559,   563,   565,   569,   574,   581,   583,   585,   587,
   589,   591,   593,   595,   597,   599,   601,   603,   606,   607,
   608,   614,   616,   618,   621,   625,   627,   630,   632,   635,
   641,   645,   647,   649,   654,   655,   662,   663,   672,   673,
   681,   683,   685,   687,   688,   691,   695,   698,   701,   704,
   708,   711,   713,   716,   718,   720,   722,   723,   727,   731,
   736,   738,   740,   744,   748,   751,   755,   757,   760,   766,
   768,   770,   772,   774,   776,   778,   780,   782,   784,   786,
   788,   790,   792,   794,   796,   798,   800,   802,   804,   806,
   808,   810,   812,   814,   816,   818,   820,   822,   827,   829,
   833,   837,   843,   846,   847,   849,   851,   853,   856,   859,
   862,   866,   871,   875,   877,   880,   885,   892,   899,   904,
   911
};

static const short yyrhs[] = {    65,
     0,   117,     0,    68,     0,    67,     0,    69,     0,    93,
   144,    94,     0,   118,     0,   119,    95,   120,    96,     0,
   121,     0,   119,    99,    71,     0,   119,    74,     0,   119,
    75,     0,   144,     0,   122,     0,   123,     0,   119,    99,
   123,     0,   125,    94,     0,   124,    94,     0,   126,    50,
     0,   126,     0,   126,   142,     0,   125,   100,   142,     0,
   127,    93,     0,   159,     0,    65,     0,    71,     0,   119,
     0,    74,   128,     0,    75,   128,     0,   129,   128,     0,
    93,   160,    94,   128,     0,   107,     0,   105,     0,   104,
     0,   106,     0,   128,     0,   130,   108,   128,     0,   130,
   109,   128,     0,   130,   110,   128,     0,   130,     0,   131,
   107,   130,     0,   131,   105,   130,     0,   131,     0,   132,
    72,   131,     0,   132,    73,   131,     0,   132,     0,   133,
   111,   132,     0,   133,   112,   132,     0,   133,    76,   132,
     0,   133,    77,   132,     0,   133,     0,   134,    78,   133,
     0,   134,    79,   133,     0,   134,     0,   135,   115,   134,
     0,   135,     0,   136,   114,   135,     0,   136,     0,   137,
   113,   136,     0,   137,     0,   138,    80,   137,     0,   138,
     0,   139,    82,   138,     0,   139,     0,   140,    81,   139,
     0,   140,     0,   140,   116,   144,   101,   142,     0,   141,
     0,   128,   143,   142,     0,   102,     0,    83,     0,    84,
     0,    86,     0,    85,     0,    92,     0,    87,     0,    88,
     0,    89,     0,    90,     0,    91,     0,   142,     0,   144,
   100,   142,     0,   141,     0,   147,   103,     0,   155,   103,
     0,   148,    94,     0,   148,    94,   101,    65,     0,   150,
     0,   149,     0,   150,   152,     0,   149,   100,   152,     0,
   157,    65,    93,     0,   159,    65,     0,   159,    65,   102,
   166,     0,   159,    65,   203,     0,   159,    65,   101,    65,
     0,   159,    65,    95,   145,    96,     0,   159,    65,    95,
   145,    96,   101,    65,     0,   158,   153,   151,     0,   153,
   151,     0,   158,   153,   154,     0,   153,   154,     0,     0,
    44,     0,    45,     0,    46,     0,   159,     0,   156,     0,
   155,   100,    65,   205,     0,   155,   100,    65,    95,    96,
   205,     0,   155,   100,    65,    95,   145,    96,   205,     0,
   155,   100,    65,    95,    96,   205,   102,   166,     0,   155,
   100,    65,    95,   145,    96,   205,   102,   166,     0,   155,
   100,    65,   205,   102,   166,     0,   157,     0,   157,    65,
   205,     0,   157,    65,    95,    96,   205,     0,   157,    65,
    95,   145,    96,   205,     0,   157,    65,    95,    96,   205,
   102,   166,     0,   157,    65,    95,   145,    96,   205,   102,
   166,     0,   157,    65,   205,   102,   166,     0,   159,     0,
   158,   159,     0,     4,     0,     5,     0,     5,     4,     0,
     3,     0,    48,     0,    47,     0,   160,     0,   160,    95,
   145,    96,     0,    50,     0,     7,     0,    11,     0,    10,
     0,     8,     0,     6,     0,    60,   111,     7,   100,    68,
   112,     0,    60,   111,     8,   100,    68,   112,     0,    60,
   111,     6,   100,    68,   112,     0,    26,     0,    27,     0,
    28,     0,    29,     0,    30,     0,    31,     0,    32,     0,
    33,     0,    34,     0,    20,     0,    21,     0,    22,     0,
    23,     0,    24,     0,    25,     0,    35,     0,    36,     0,
    37,     0,    38,     0,    39,     0,    40,     0,    41,     0,
    42,     0,    43,     0,    63,     0,    59,     0,    52,     0,
    53,     0,    54,     0,    55,     0,    58,     0,    56,     0,
    57,     0,   161,     0,    66,     0,    49,    65,    97,   162,
    98,     0,    49,    97,   162,    98,     0,   163,     0,   162,
   163,     0,   159,   164,   103,     0,   165,     0,   164,   100,
   165,     0,    65,     0,    65,   101,    65,     0,    65,    95,
   145,    96,     0,    65,    95,   145,    96,   101,    65,     0,
   142,     0,   192,     0,   206,     0,   146,     0,   170,     0,
   169,     0,   167,     0,   176,     0,   177,     0,   180,     0,
   187,     0,    97,    98,     0,     0,     0,    97,   171,   175,
   172,    98,     0,   174,     0,   169,     0,    97,    98,     0,
    97,   175,    98,     0,   168,     0,   175,   168,     0,   103,
     0,   144,   103,     0,    17,    93,   144,    94,   178,     0,
   168,    15,   168,     0,   168,     0,   144,     0,   157,    65,
   102,   166,     0,     0,    51,    93,   181,   179,    94,   173,
     0,     0,    14,   182,   168,    51,    93,   144,    94,   103,
     0,     0,    16,    93,   183,   184,   186,    94,   173,     0,
   176,     0,   167,     0,   179,     0,     0,   185,   103,     0,
   185,   103,   144,     0,    13,   103,     0,    12,   103,     0,
    19,   103,     0,    19,   144,   103,     0,    18,   103,     0,
   189,     0,   188,   189,     0,   190,     0,   146,     0,   103,
     0,     0,   147,   191,   174,     0,    97,   193,    98,     0,
    97,   193,   100,    98,     0,   142,     0,   192,     0,   193,
   100,   142,     0,   193,   100,   192,     0,   111,   112,     0,
   111,   195,   112,     0,   196,     0,   195,   196,     0,   197,
    65,   102,   198,   103,     0,     7,     0,    11,     0,    10,
     0,     8,     0,     6,     0,     9,     0,    20,     0,    21,
     0,    22,     0,    23,     0,    24,     0,    25,     0,    26,
     0,    27,     0,    28,     0,    29,     0,    30,     0,    31,
     0,    32,     0,    33,     0,    34,     0,   199,     0,    70,
     0,   200,     0,   202,     0,    68,     0,    69,     0,    67,
     0,   197,    93,   201,    94,     0,   199,     0,   201,   100,
   199,     0,    97,   201,    98,     0,   101,    62,    93,    65,
    94,     0,   101,    65,     0,     0,   204,     0,   203,     0,
   194,     0,   204,   194,     0,   204,   203,     0,   203,   194,
     0,   204,   203,   194,     0,    64,    97,   207,    98,     0,
    64,    97,    98,     0,   208,     0,   207,   208,     0,    65,
   102,    65,   103,     0,    65,   102,   111,    65,   112,   103,
     0,    65,   102,    93,    65,    94,   103,     0,    63,   102,
    65,   103,     0,    63,   102,   111,    65,   112,   103,     0,
    63,   102,    93,    65,    94,   103,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   190,   226,   229,   234,   239,   244,   250,   253,   330,   333,
   452,   462,   475,   483,   597,   600,   618,   622,   629,   633,
   640,   649,   661,   669,   730,   742,   752,   755,   765,   775,
   793,   864,   865,   866,   867,   873,   874,   883,   892,   903,
   904,   912,   923,   924,   933,   945,   946,   956,   966,   976,
   989,   990,  1001,  1015,  1016,  1028,  1029,  1041,  1042,  1054,
  1055,  1068,  1069,  1082,  1083,  1096,  1097,  1112,  1113,  1127,
  1128,  1129,  1130,  1131,  1132,  1133,  1134,  1135,  1136,  1137,
  1141,  1144,  1155,  1163,  1164,  1172,  1205,  1242,  1245,  1252,
  1260,  1281,  1306,  1317,  1330,  1342,  1354,  1372,  1401,  1406,
  1416,  1421,  1431,  1434,  1437,  1440,  1446,  1453,  1456,  1467,
  1485,  1506,  1537,  1571,  1608,  1612,  1625,  1644,  1667,  1701,
  1738,  1789,  1792,  1814,  1817,  1822,  1827,  1833,  1841,  1849,
  1852,  1867,  1870,  1873,  1876,  1879,  1882,  1885,  1896,  1907,
  1918,  1922,  1926,  1930,  1934,  1938,  1942,  1946,  1950,  1954,
  1958,  1962,  1966,  1970,  1974,  1978,  1983,  1988,  1993,  1998,
  2003,  2008,  2013,  2018,  2023,  2027,  2031,  2035,  2039,  2043,
  2047,  2051,  2055,  2059,  2064,  2076,  2086,  2094,  2097,  2112,
  2144,  2148,  2154,  2159,  2165,  2175,  2191,  2192,  2193,  2197,
  2201,  2202,  2208,  2209,  2210,  2211,  2212,  2216,  2217,  2217,
  2217,  2225,  2226,  2231,  2234,  2242,  2245,  2251,  2252,  2256,
  2264,  2268,  2278,  2283,  2300,  2300,  2305,  2305,  2312,  2312,
  2325,  2328,  2334,  2337,  2343,  2347,  2354,  2361,  2368,  2375,
  2395,  2404,  2408,  2415,  2418,  2421,  2425,  2513,  2533,  2536,
  2543,  2547,  2551,  2555,  2562,  2566,  2572,  2576,  2583,  2589,
  2590,  2591,  2592,  2593,  2594,  2595,  2596,  2597,  2598,  2599,
  2600,  2601,  2602,  2603,  2604,  2605,  2606,  2607,  2608,  2609,
  2613,  2614,  2615,  2616,  2620,  2623,  2626,  2632,  2636,  2637,
  2641,  2645,  2651,  2655,  2656,  2657,  2658,  2659,  2660,  2661,
  2662,  2666,  2671,  2676,  2678,  2683,  2684,  2685,  2686,  2687,
  2688
};

static const char * const yytname[] = {   "$","error","$undefined.","ATTRIBUTE",
"CONST_QUAL","STATIC_QUAL","BOOL_TYPE","FLOAT_TYPE","INT_TYPE","STRING_TYPE",
"FIXED_TYPE","HALF_TYPE","BREAK","CONTINUE","DO","ELSE","FOR","IF","DISCARD",
"RETURN","BVEC2","BVEC3","BVEC4","IVEC2","IVEC3","IVEC4","VEC2","VEC3","VEC4",
"HVEC2","HVEC3","HVEC4","FVEC2","FVEC3","FVEC4","MATRIX2","MATRIX3","MATRIX4",
"HMATRIX2","HMATRIX3","HMATRIX4","FMATRIX2","FMATRIX3","FMATRIX4","IN_QUAL",
"OUT_QUAL","INOUT_QUAL","UNIFORM","VARYING","STRUCT","VOID_TYPE","WHILE","SAMPLER1D",
"SAMPLER2D","SAMPLER3D","SAMPLERCUBE","SAMPLER1DSHADOW","SAMPLER2DSHADOW","SAMPLERRECT",
"SAMPLERGENERIC","VECTOR","MATRIX","REGISTER","TEXTURE","SAMPLERSTATE","IDENTIFIER",
"TYPE_NAME","FLOATCONSTANT","INTCONSTANT","BOOLCONSTANT","STRINGCONSTANT","FIELD_SELECTION",
"LEFT_OP","RIGHT_OP","INC_OP","DEC_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP",
"OR_OP","XOR_OP","MUL_ASSIGN","DIV_ASSIGN","ADD_ASSIGN","MOD_ASSIGN","LEFT_ASSIGN",
"RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","SUB_ASSIGN","LEFT_PAREN",
"RIGHT_PAREN","LEFT_BRACKET","RIGHT_BRACKET","LEFT_BRACE","RIGHT_BRACE","DOT",
"COMMA","COLON","EQUAL","SEMICOLON","BANG","DASH","TILDE","PLUS","STAR","SLASH",
"PERCENT","LEFT_ANGLE","RIGHT_ANGLE","VERTICAL_BAR","CARET","AMPERSAND","QUESTION",
"variable_identifier","primary_expression","postfix_expression","integer_expression",
"function_call","function_call_or_method","function_call_generic","function_call_header_no_parameters",
"function_call_header_with_parameters","function_call_header","function_identifier",
"unary_expression","unary_operator","multiplicative_expression","additive_expression",
"shift_expression","relational_expression","equality_expression","and_expression",
"exclusive_or_expression","inclusive_or_expression","logical_and_expression",
"logical_xor_expression","logical_or_expression","conditional_expression","assignment_expression",
"assignment_operator","expression","constant_expression","declaration","function_prototype",
"function_declarator","function_header_with_parameters","function_header","parameter_declarator",
"parameter_declaration","parameter_qualifier","parameter_type_specifier","init_declarator_list",
"single_declaration","fully_specified_type","type_qualifier","type_specifier",
"type_specifier_nonarray","struct_specifier","struct_declaration_list","struct_declaration",
"struct_declarator_list","struct_declarator","initializer","declaration_statement",
"statement","simple_statement","compound_statement","@1","@2","statement_no_new_scope",
"compound_statement_no_new_scope","statement_list","expression_statement","selection_statement",
"selection_rest_statement","condition","iteration_statement","@3","@4","@5",
"for_init_statement","conditionopt","for_rest_statement","jump_statement","translation_unit",
"external_declaration","function_definition","@6","initialization_list","initializer_list",
"annotation","annotation_list","annotation_item","ann_type","ann_literal","ann_numerical_constant",
"ann_literal_constructor","ann_value_list","ann_literal_init_list","register_specifier",
"semantic","type_info","sampler_initializer","sampler_init_list","sampler_init_item",
""
};
#endif

static const short yyr1[] = {     0,
   117,   118,   118,   118,   118,   118,   119,   119,   119,   119,
   119,   119,   120,   121,   122,   122,   123,   123,   124,   124,
   125,   125,   126,   127,   127,   127,   128,   128,   128,   128,
   128,   129,   129,   129,   129,   130,   130,   130,   130,   131,
   131,   131,   132,   132,   132,   133,   133,   133,   133,   133,
   134,   134,   134,   135,   135,   136,   136,   137,   137,   138,
   138,   139,   139,   140,   140,   141,   141,   142,   142,   143,
   143,   143,   143,   143,   143,   143,   143,   143,   143,   143,
   144,   144,   145,   146,   146,   147,   147,   148,   148,   149,
   149,   150,   151,   151,   151,   151,   151,   151,   152,   152,
   152,   152,   153,   153,   153,   153,   154,   155,   155,   155,
   155,   155,   155,   155,   156,   156,   156,   156,   156,   156,
   156,   157,   157,   158,   158,   158,   158,   158,   158,   159,
   159,   160,   160,   160,   160,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   160,   161,   161,   162,   162,   163,
   164,   164,   165,   165,   165,   165,   166,   166,   166,   167,
   168,   168,   169,   169,   169,   169,   169,   170,   171,   172,
   170,   173,   173,   174,   174,   175,   175,   176,   176,   177,
   178,   178,   179,   179,   181,   180,   182,   180,   183,   180,
   184,   184,   185,   185,   186,   186,   187,   187,   187,   187,
   187,   188,   188,   189,   189,   189,   191,   190,   192,   192,
   193,   193,   193,   193,   194,   194,   195,   195,   196,   197,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   198,   198,   198,   198,   199,   199,   199,   200,   201,   201,
   202,   203,   204,   205,   205,   205,   205,   205,   205,   205,
   205,   206,   206,   207,   207,   208,   208,   208,   208,   208,
   208
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,     1,     3,     1,     4,     1,     3,
     2,     2,     1,     1,     1,     3,     2,     2,     2,     1,
     2,     3,     2,     1,     1,     1,     1,     2,     2,     2,
     4,     1,     1,     1,     1,     1,     3,     3,     3,     1,
     3,     3,     1,     3,     3,     1,     3,     3,     3,     3,
     1,     3,     3,     1,     3,     1,     3,     1,     3,     1,
     3,     1,     3,     1,     3,     1,     5,     1,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     1,     2,     2,     2,     4,     1,     1,     2,
     3,     3,     2,     4,     3,     4,     5,     7,     3,     2,
     3,     2,     0,     1,     1,     1,     1,     1,     4,     6,
     7,     8,     9,     6,     1,     3,     5,     6,     7,     8,
     5,     1,     2,     1,     1,     2,     1,     1,     1,     1,
     4,     1,     1,     1,     1,     1,     1,     6,     6,     6,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     5,     4,     1,     2,     3,
     1,     3,     1,     3,     4,     6,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     0,     0,
     5,     1,     1,     2,     3,     1,     2,     1,     2,     5,
     3,     1,     1,     4,     0,     6,     0,     8,     0,     7,
     1,     1,     1,     0,     2,     3,     2,     2,     2,     3,
     2,     1,     2,     1,     1,     1,     0,     3,     3,     4,
     1,     1,     3,     3,     2,     3,     1,     2,     5,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     4,     1,     3,
     3,     5,     2,     0,     1,     1,     1,     2,     2,     2,
     3,     4,     3,     1,     2,     4,     6,     6,     4,     6,
     6
};

static const short yydefact[] = {     0,
   127,   124,   125,   137,   133,   136,   135,   134,   150,   151,
   152,   153,   154,   155,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   129,   128,     0,   132,   167,   168,   169,   170,
   172,   173,   171,   166,     0,   165,   175,   236,   235,   237,
     0,    89,   103,     0,   108,   115,     0,   122,   130,   174,
     0,   232,   234,   126,     0,     0,     0,    84,     0,    86,
   103,   104,   105,   106,    90,     0,   103,     0,    85,   284,
   123,     0,   233,     0,     0,     0,   178,     0,     0,     0,
     0,   238,     0,    91,   100,   102,   107,     0,   284,    92,
     0,     0,     0,   287,   286,   285,   116,     1,     4,     3,
     5,    26,     0,     0,     0,    34,    33,    35,    32,     2,
     7,    27,     9,    14,    15,     0,     0,    20,     0,    36,
     0,    40,    43,    46,    51,    54,    56,    58,    60,    62,
    64,    66,    83,     0,    24,     0,   183,     0,   181,   177,
   179,     0,     0,     0,     0,     0,   217,     0,     0,     0,
     0,     0,   199,   204,   208,    36,    68,    81,     0,   190,
     0,   122,   193,   206,   192,   191,     0,   194,   195,   196,
   197,    87,    93,    99,   101,     0,   109,   284,     0,     0,
   283,   254,   250,   253,   255,   252,   251,   256,   257,   258,
   259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
   269,   270,   245,     0,   247,     0,   290,     0,   288,   289,
     0,    28,    29,     0,   130,    11,    12,     0,     0,    18,
    17,     0,   132,    21,    23,    30,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   131,   176,     0,     0,
     0,   180,     0,     0,     0,   228,   227,     0,   219,     0,
   231,   229,     0,   215,   198,     0,    71,    72,    74,    73,
    76,    77,    78,    79,    80,    75,    70,     0,     0,   209,
   205,   207,     0,     0,     0,    95,   284,     0,     0,   117,
   284,     0,   246,   248,     0,   291,     0,     0,   187,   121,
   188,   189,     6,     0,     0,    13,    25,    10,    16,    22,
    37,    38,    39,    42,    41,    44,    45,    49,    50,    47,
    48,    52,    53,    55,    57,    59,    61,    63,    65,     0,
     0,   184,   182,   140,   138,   139,     0,     0,     0,   230,
     0,   200,    69,    82,     0,    96,    94,   110,   284,   114,
     0,   118,     0,     0,     0,   241,   242,     0,    31,     8,
     0,   185,     0,   222,   221,   224,     0,   213,     0,     0,
     0,    97,     0,   111,   119,     0,   282,   277,   275,   276,
   272,     0,     0,     0,   271,   273,   274,     0,     0,   293,
     0,   294,   239,     0,    67,     0,     0,   223,     0,     0,
   212,   210,     0,     0,   201,     0,   112,     0,   120,   279,
     0,     0,   249,     0,     0,   292,   295,   240,   243,   244,
   186,     0,   225,     0,     0,     0,   203,   216,   202,    98,
   113,   281,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   226,   220,   211,   214,   280,   278,   299,     0,     0,
   296,     0,     0,   218,     0,     0,     0,     0,   301,   300,
   298,   297,     0,     0
};

static const short yydefgoto[] = {   120,
   121,   122,   315,   123,   124,   125,   126,   127,   128,   129,
   166,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   167,   168,   288,   169,   144,   170,   171,
    51,    52,    53,    95,    75,    76,    96,    54,    55,    56,
    57,   145,    59,    60,    86,    87,   148,   149,   310,   173,
   174,   175,   176,   276,   381,   438,   439,   177,   178,   179,
   412,   380,   180,   351,   268,   348,   376,   409,   410,   181,
    61,    62,    63,    69,   311,   368,   104,   214,   215,   216,
   394,   420,   396,   421,   397,   105,   106,   107,   312,   401,
   402
};

static const short yypact[] = {  1846,
-32768,-32768,    32,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -45,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -61,-32768,-32768,-32768,-32768,    -2,
   -22,    61,    23,   -18,-32768,    48,  2150,-32768,    69,-32768,
  1035,-32768,-32768,-32768,    71,  2150,   141,-32768,    79,    82,
   140,-32768,-32768,-32768,-32768,  2150,   109,   115,-32768,    14,
-32768,  1667,-32768,  2150,   124,  1930,-32768,    92,    95,    97,
   433,-32768,   133,-32768,-32768,-32768,   134,  2150,   -62,-32768,
  1309,    46,   274,-32768,    93,   -67,   105,   116,-32768,-32768,
-32768,-32768,  1667,  1667,  1667,-32768,-32768,-32768,-32768,-32768,
-32768,     5,-32768,-32768,-32768,   114,   -59,  1755,   117,-32768,
  1667,    49,   -24,   -10,   -53,    72,   119,   118,   123,   151,
   156,   -65,-32768,   143,-32768,  2009,   -47,    21,-32768,-32768,
-32768,   172,   173,   174,   153,   155,-32768,   150,   166,   158,
  1400,   176,   146,-32768,-32768,   163,-32768,-32768,    33,-32768,
    -2,   177,-32768,-32768,-32768,-32768,   538,-32768,-32768,-32768,
-32768,-32768,    25,-32768,-32768,  1488,   164,   -58,   175,   179,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   305,-32768,   208,-32768,   212,-32768,    93,
  1119,-32768,-32768,    -4,    80,-32768,-32768,  1667,  2088,-32768,
-32768,  1667,   181,-32768,-32768,-32768,  1667,  1667,  1667,  1667,
  1667,  1667,  1667,  1667,  1667,  1667,  1667,  1667,  1667,  1667,
  1667,  1667,  1667,  1667,  1667,  1667,-32768,-32768,  1667,   214,
   124,-32768,   165,   178,   197,-32768,-32768,   643,-32768,  1667,
-32768,-32768,    35,-32768,-32768,   643,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1667,  1667,-32768,
-32768,-32768,  1667,    75,  1119,-32768,   -58,   190,  1119,   185,
   -58,   224,-32768,-32768,   189,-32768,   220,  1579,-32768,-32768,
-32768,-32768,-32768,  1667,   222,   221,-32768,   227,-32768,-32768,
-32768,-32768,-32768,    49,    49,   -24,   -24,   -10,   -10,   -10,
   -10,   -53,   -53,    72,   119,   118,   123,   151,   156,    78,
   226,-32768,-32768,-32768,-32768,-32768,   272,   853,    16,-32768,
   944,   643,-32768,-32768,   228,-32768,-32768,   244,   -58,-32768,
  1119,   245,   255,   334,   -34,-32768,-32768,    41,-32768,-32768,
  1667,   249,   260,-32768,-32768,   944,   643,   221,   304,   276,
   273,   271,  1119,   277,-32768,  1119,-32768,-32768,-32768,-32768,
-32768,   103,   280,   275,-32768,-32768,-32768,   278,   279,-32768,
   -33,-32768,-32768,  1207,-32768,   309,  1667,-32768,   281,   288,
   360,-32768,   283,   748,-32768,   318,-32768,  1119,-32768,-32768,
    67,   103,-32768,   -56,   -51,-32768,-32768,-32768,-32768,-32768,
-32768,    18,  1667,   748,   643,  1119,-32768,-32768,-32768,-32768,
-32768,-32768,   103,    28,   284,   323,   324,   287,   326,   327,
   290,   221,-32768,-32768,-32768,-32768,-32768,-32768,   300,   285,
-32768,   301,   286,-32768,   293,   296,   297,   302,-32768,-32768,
-32768,-32768,   406,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,   180,-32768,-32768,-32768,-32768,
   -26,-32768,   -50,   -49,  -115,   -46,   157,   159,   160,   162,
   154,   161,-32768,   -63,  -126,-32768,  -114,   -93,    12,    13,
-32768,-32768,-32768,   313,   342,   341,   321,-32768,-32768,  -330,
   -31,     0,   306,-32768,   336,   -68,-32768,   167,  -284,    74,
  -171,  -389,-32768,-32768,-32768,   -11,   355,   149,    81,-32768,
-32768,    50,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   366,-32768,-32768,  -301,-32768,  -101,-32768,   216,    68,
-32768,  -354,-32768,    11,-32768,   -89,-32768,   -96,-32768,-32768,
    47
};


#define	YYLAST		2216


static const short yytable[] = {    58,
   224,   234,   187,   217,   219,   292,   367,   189,   445,   395,
   357,    49,    50,   448,   360,   255,   220,   151,   143,    65,
   379,    77,   244,   245,   437,     1,     2,     3,   398,   398,
   399,   399,   186,   218,   231,    64,   446,   143,   102,    77,
   232,   449,   102,   103,   437,   379,   273,   259,   103,    67,
   256,    66,   103,   260,   447,   130,    81,   246,   247,   450,
    58,   242,   243,   400,   426,    85,    72,    73,    74,    33,
    34,    70,    49,    50,   130,    97,   385,   151,   226,   227,
   240,    78,   241,    85,    79,    85,   222,   223,   456,   313,
   172,   300,   298,   296,   309,   289,   347,    97,   417,   228,
    68,   419,   430,   229,   236,   320,   100,   190,   101,   377,
   191,   451,    80,   316,   102,   289,   -88,   289,   306,   293,
   261,   457,   143,   262,   103,   294,   295,   443,   328,   329,
   330,   331,   289,   441,   289,   290,   190,   350,   403,   356,
   404,   340,     1,     2,     3,    85,    88,    89,    90,   248,
   249,   455,    72,    73,    74,   349,   237,   238,   239,   130,
    71,   353,   354,    82,   442,   341,   443,    84,   309,   388,
   389,   390,   309,   314,    82,    91,   172,   289,   371,    99,
   292,   366,    93,    72,    73,    74,    33,    34,   147,   324,
   325,   152,   326,   327,   153,   143,   154,   182,   183,   355,
   358,   332,   333,   103,   362,   411,   221,   230,   -25,   235,
   321,   322,   323,   130,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   143,
   253,   251,   130,   250,   309,   252,   378,   254,   257,   263,
   264,   265,   269,   275,   405,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   266,   309,   267,   270,   309,
   271,   378,   384,   454,   287,   299,   130,   172,   274,   -24,
   301,   302,   305,   190,   -19,   172,   344,   429,   342,   192,
   193,   194,   195,   196,   197,   359,   361,   369,   363,   345,
   364,   309,   432,   198,   199,   200,   201,   202,   203,   204,
   205,   206,   207,   208,   209,   210,   211,   212,   346,   309,
   192,   193,   194,   195,   196,   197,   365,   370,   452,   -26,
   289,   372,   373,   382,   198,   199,   200,   201,   202,   203,
   204,   205,   206,   207,   208,   209,   210,   211,   212,   192,
   193,   194,   195,   196,   197,   383,   386,   172,   387,   406,
   172,   172,   407,   198,   199,   200,   201,   202,   203,   204,
   205,   206,   207,   208,   209,   210,   211,   212,   413,   414,
   415,   416,   422,   431,   435,   172,   172,   423,   418,   424,
   425,   434,   440,   433,   436,   213,   458,   459,   460,   461,
   462,   463,   464,   465,   467,   469,   466,   468,   470,   471,
   388,   389,   390,   391,   472,   474,   334,   338,   319,   335,
   184,   336,    94,   172,   337,   339,   303,    98,   185,   146,
   225,   374,   453,    92,   352,   408,    83,   343,   375,   304,
   392,   393,   444,   172,   172,     1,     2,     3,     4,     5,
     6,     0,     7,     8,   155,   156,   157,   427,   158,   159,
   160,   161,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     0,     0,     0,    33,
    34,    35,    36,   162,    37,    38,    39,    40,    41,    42,
    43,    44,    45,     0,     0,    46,     0,   108,    47,   109,
   110,   111,     0,   112,     0,     0,   113,   114,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   115,     0,     0,     0,   163,
   164,     0,     0,     0,     0,   165,   116,   117,   118,   119,
     1,     2,     3,     4,     5,     6,     0,     7,     8,   155,
   156,   157,     0,   158,   159,   160,   161,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     0,     0,     0,    33,    34,    35,    36,   162,    37,
    38,    39,    40,    41,    42,    43,    44,    45,     0,     0,
    46,     0,   108,    47,   109,   110,   111,     0,   112,     0,
     0,   113,   114,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   115,     0,     0,     0,   163,   291,     0,     0,     0,     0,
   165,   116,   117,   118,   119,     1,     2,     3,     4,     5,
     6,     0,     7,     8,   155,   156,   157,     0,   158,   159,
   160,   161,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     0,     0,     0,    33,
    34,    35,    36,   162,    37,    38,    39,    40,    41,    42,
    43,    44,    45,     0,     0,    46,     0,   108,    47,   109,
   110,   111,     0,   112,     0,     0,   113,   114,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   115,     0,     0,     0,   163,
     0,     0,     0,     0,     0,   165,   116,   117,   118,   119,
     1,     2,     3,     4,     5,     6,     0,     7,     8,   155,
   156,   157,     0,   158,   159,   160,   161,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     0,     0,     0,    33,    34,    35,    36,   162,    37,
    38,    39,    40,    41,    42,    43,    44,    45,     0,     0,
    46,     0,   108,    47,   109,   110,   111,     0,   112,     0,
     0,   113,   114,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   115,     0,     0,     0,    91,     0,     0,     0,     0,     0,
   165,   116,   117,   118,   119,     1,     2,     3,     4,     5,
     6,     0,     7,     8,     0,     0,     0,     0,     0,     0,
     0,     0,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     0,     0,     0,    33,
    34,    35,    36,     0,    37,    38,    39,    40,    41,    42,
    43,    44,    45,     0,     0,    46,     0,   108,    47,   109,
   110,   111,     0,   112,     0,     0,   113,   114,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   115,     1,     2,     3,     4,
     5,     6,     0,     7,     8,   165,   116,   117,   118,   119,
     0,     0,     0,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,     0,     0,     0,
    33,    34,    35,    36,     0,    37,    38,    39,    40,    41,
    42,    43,    44,    45,     0,     0,    46,     0,   108,    47,
   109,   110,   111,     0,   112,     0,     0,   113,   114,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   473,     0,   115,     1,     2,     3,
     4,     5,     6,     0,     7,     8,     0,   116,   117,   118,
   119,     0,     0,     0,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,     0,     0,
     0,    33,    34,    35,    36,     0,    37,    38,    39,    40,
    41,    42,    43,    44,    45,     0,     0,    46,     0,     0,
    47,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     4,     5,     6,     0,     7,     8,
     0,     0,     0,     0,     0,     0,     0,    48,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     0,     0,     0,     0,     0,    35,    36,     0,
    37,    38,    39,    40,    41,    42,    43,    44,    45,     0,
     0,    46,   307,   108,    47,   109,   110,   111,     0,   112,
     0,     0,   113,   114,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   115,     4,     5,     6,   308,     7,     8,     0,     0,
     0,     0,   116,   117,   118,   119,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     0,     0,     0,     0,     0,    35,    36,     0,    37,    38,
    39,    40,    41,    42,    43,    44,    45,     0,     0,    46,
     0,   108,    47,   109,   110,   111,     0,   112,     0,     0,
   113,   114,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   115,
     0,     0,     0,   308,   428,     0,     0,     0,     0,     0,
   116,   117,   118,   119,     4,     5,     6,     0,     7,     8,
     0,     0,     0,     0,     0,     0,     0,     0,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     0,     0,     0,     0,     0,    35,    36,     0,
    37,    38,    39,    40,    41,    42,    43,    44,    45,     0,
     0,    46,     0,   108,    47,   109,   110,   111,     0,   112,
     0,     0,   113,   114,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   115,     0,     0,   188,     4,     5,     6,     0,     7,
     8,     0,   116,   117,   118,   119,     0,     0,     0,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,     0,     0,     0,     0,     0,    35,    36,
     0,    37,    38,    39,    40,    41,    42,    43,    44,    45,
     0,     0,    46,     0,   108,    47,   109,   110,   111,     0,
   112,     0,     0,   113,   114,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   115,     4,     5,     6,     0,     7,     8,     0,
     0,     0,   272,   116,   117,   118,   119,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     0,     0,     0,     0,     0,    35,    36,     0,    37,
    38,    39,    40,    41,    42,    43,    44,    45,     0,     0,
    46,     0,   108,    47,   109,   110,   111,     0,   112,     0,
     0,   113,   114,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   115,     0,     0,   297,     4,     5,     6,     0,     7,     8,
     0,   116,   117,   118,   119,     0,     0,     0,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     0,     0,     0,     0,     0,    35,    36,     0,
    37,    38,    39,    40,    41,    42,    43,    44,    45,     0,
     0,    46,     0,   108,    47,   109,   110,   111,     0,   112,
     0,     0,   113,   114,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   115,     4,     5,     6,   308,     7,     8,     0,     0,
     0,     0,   116,   117,   118,   119,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     0,     0,     0,     0,     0,    35,    36,     0,    37,    38,
    39,    40,    41,    42,    43,    44,    45,     0,     0,    46,
     0,   108,    47,   109,   110,   111,     0,   112,     0,     0,
   113,   114,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   115,
     4,     5,     6,     0,     7,     8,     0,     0,     0,     0,
   116,   117,   118,   119,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,     0,     0,
     0,     0,     0,    35,   233,     0,    37,    38,    39,    40,
    41,    42,    43,    44,    45,     0,     0,    46,     0,   108,
    47,   109,   110,   111,     0,   112,     0,     0,   113,   114,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   115,     1,     2,
     3,     4,     5,     6,     0,     7,     8,     0,   116,   117,
   118,   119,     0,     0,     0,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,     0,
     0,     0,    33,    34,    35,    36,     0,    37,    38,    39,
    40,    41,    42,    43,    44,    45,     0,     0,    46,     0,
     0,    47,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     4,     5,     6,     0,     7,
     8,     0,     0,     0,     0,     0,     0,     0,    48,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,     0,     0,     0,     0,     0,    35,    36,
     0,    37,    38,    39,    40,    41,    42,    43,    44,    45,
     0,     0,    46,     0,     0,    47,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     4,     5,     6,     0,     7,     8,
     0,     0,     0,     0,     0,     0,     0,   150,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     0,     0,     0,     0,     0,    35,    36,     0,
    37,    38,    39,    40,    41,    42,    43,    44,    45,     0,
     0,    46,     0,     0,    47,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     4,     5,     6,     0,     7,     8,     0,
     0,     0,     0,     0,     0,     0,   258,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     0,     0,     0,     0,     0,    35,    36,     0,    37,
    38,    39,    40,    41,    42,    43,    44,    45,     0,     0,
    46,     0,   317,    47,     0,     4,     5,     6,   318,     7,
     8,     0,     0,     0,     0,     0,     0,     0,     0,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,     0,     0,     0,     0,     0,    35,    36,
     0,    37,    38,    39,    40,    41,    42,    43,    44,    45,
     0,     0,    46,     0,     0,    47
};

static const short yycheck[] = {     0,
   115,   128,    99,   105,   106,   177,   308,   101,    65,   364,
   295,     0,     0,    65,   299,    81,   106,    86,    82,    65,
   351,    53,    76,    77,   414,     3,     4,     5,    63,    63,
    65,    65,    95,   101,    94,     4,    93,   101,   101,    71,
   100,    93,   101,   111,   434,   376,   161,    95,   111,   111,
   116,    97,   111,   101,   111,    82,    57,   111,   112,   111,
    61,    72,    73,    98,    98,    66,    44,    45,    46,    47,
    48,    94,    61,    61,   101,    76,   361,   146,    74,    75,
   105,   100,   107,    84,   103,    86,   113,   114,   443,    94,
    91,   188,   186,   183,   221,   100,   268,    98,   383,    95,
   103,   386,   404,    99,   131,   232,    93,    62,    95,    94,
    65,    94,    65,   228,   101,   100,    94,   100,   220,    95,
   100,    94,   186,   103,   111,   101,   102,   100,   244,   245,
   246,   247,   100,   418,   100,   103,    62,   103,    98,    65,
   100,   256,     3,     4,     5,   146,     6,     7,     8,    78,
    79,   436,    44,    45,    46,   270,   108,   109,   110,   186,
   100,   288,   289,    95,    98,   259,   100,    97,   295,    67,
    68,    69,   299,    94,    95,    97,   177,   100,   101,    65,
   352,   308,   101,    44,    45,    46,    47,    48,    65,   240,
   241,   100,   242,   243,   100,   259,   100,    65,    65,   293,
   297,   248,   249,   111,   301,   377,   102,    94,    93,    93,
   237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
   247,   248,   249,   250,   251,   252,   253,   254,   255,   293,
    80,   114,   259,   115,   361,   113,   351,    82,    96,    68,
    68,    68,    93,    98,   371,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,   103,   383,   103,    93,   386,
   103,   376,   359,   435,   102,   102,   293,   268,    93,    93,
    96,    93,    65,    62,    94,   276,   112,   404,    65,     6,
     7,     8,     9,    10,    11,    96,   102,   314,    65,   112,
   102,   418,   407,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,   112,   436,
     6,     7,     8,     9,    10,    11,    97,    96,   433,    93,
   100,    96,    51,    96,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,     6,
     7,     8,     9,    10,    11,   102,   102,   348,    94,   101,
   351,   352,    93,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    65,    94,
    98,   101,    93,    65,    15,   376,   377,   103,   102,   102,
   102,    94,    65,   103,   102,   112,   103,    65,    65,   103,
    65,    65,   103,    94,    94,   103,   112,   112,   103,   103,
    67,    68,    69,    70,   103,     0,   250,   254,   229,   251,
    98,   252,    71,   414,   253,   255,   112,    77,    98,    84,
   115,   348,   434,    69,   276,   376,    61,   261,   348,   214,
    97,   364,   422,   434,   435,     3,     4,     5,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,   401,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    -1,    -1,    -1,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    -1,    -1,    63,    -1,    65,    66,    67,
    68,    69,    -1,    71,    -1,    -1,    74,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,    97,
    98,    -1,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     3,     4,     5,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    -1,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    -1,    -1,    -1,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    -1,    -1,
    63,    -1,    65,    66,    67,    68,    69,    -1,    71,    -1,
    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    93,    -1,    -1,    -1,    97,    98,    -1,    -1,    -1,    -1,
   103,   104,   105,   106,   107,     3,     4,     5,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    -1,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    -1,    -1,    -1,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    -1,    -1,    63,    -1,    65,    66,    67,
    68,    69,    -1,    71,    -1,    -1,    74,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,    97,
    -1,    -1,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     3,     4,     5,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    -1,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    -1,    -1,    -1,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    -1,    -1,
    63,    -1,    65,    66,    67,    68,    69,    -1,    71,    -1,
    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    93,    -1,    -1,    -1,    97,    -1,    -1,    -1,    -1,    -1,
   103,   104,   105,   106,   107,     3,     4,     5,     6,     7,
     8,    -1,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    -1,    -1,    -1,    47,
    48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    -1,    -1,    63,    -1,    65,    66,    67,
    68,    69,    -1,    71,    -1,    -1,    74,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    93,     3,     4,     5,     6,
     7,     8,    -1,    10,    11,   103,   104,   105,   106,   107,
    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    -1,    -1,    -1,
    47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    -1,    -1,    63,    -1,    65,    66,
    67,    68,    69,    -1,    71,    -1,    -1,    74,    75,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     0,    -1,    93,     3,     4,     5,
     6,     7,     8,    -1,    10,    11,    -1,   104,   105,   106,
   107,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    -1,    -1,
    -1,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    -1,    -1,    63,    -1,    -1,
    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     6,     7,     8,    -1,    10,    11,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
    -1,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
    -1,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    93,     6,     7,     8,    97,    10,    11,    -1,    -1,
    -1,    -1,   104,   105,   106,   107,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
    -1,    65,    66,    67,    68,    69,    -1,    71,    -1,    -1,
    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,
    -1,    -1,    -1,    97,    98,    -1,    -1,    -1,    -1,    -1,
   104,   105,   106,   107,     6,     7,     8,    -1,    10,    11,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
    -1,    63,    -1,    65,    66,    67,    68,    69,    -1,    71,
    -1,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    93,    -1,    -1,    96,     6,     7,     8,    -1,    10,
    11,    -1,   104,   105,   106,   107,    -1,    -1,    -1,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    -1,    -1,    -1,    -1,    -1,    49,    50,
    -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    -1,    -1,    63,    -1,    65,    66,    67,    68,    69,    -1,
    71,    -1,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    93,     6,     7,     8,    -1,    10,    11,    -1,
    -1,    -1,   103,   104,   105,   106,   107,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    -1,    -1,
    63,    -1,    65,    66,    67,    68,    69,    -1,    71,    -1,
    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    93,    -1,    -1,    96,     6,     7,     8,    -1,    10,    11,
    -1,   104,   105,   106,   107,    -1,    -1,    -1,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
    -1,    63,    -1,    65,    66,    67,    68,    69,    -1,    71,
    -1,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    93,     6,     7,     8,    97,    10,    11,    -1,    -1,
    -1,    -1,   104,   105,   106,   107,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
    -1,    65,    66,    67,    68,    69,    -1,    71,    -1,    -1,
    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,
     6,     7,     8,    -1,    10,    11,    -1,    -1,    -1,    -1,
   104,   105,   106,   107,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    -1,    -1,
    -1,    -1,    -1,    49,    50,    -1,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    -1,    -1,    63,    -1,    65,
    66,    67,    68,    69,    -1,    71,    -1,    -1,    74,    75,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,     3,     4,
     5,     6,     7,     8,    -1,    10,    11,    -1,   104,   105,
   106,   107,    -1,    -1,    -1,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    -1,
    -1,    -1,    47,    48,    49,    50,    -1,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    -1,    -1,    63,    -1,
    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     6,     7,     8,    -1,    10,
    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    -1,    -1,    -1,    -1,    -1,    49,    50,
    -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     6,     7,     8,    -1,    10,    11,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
    -1,    63,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     6,     7,     8,    -1,    10,    11,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    98,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    -1,    -1,
    63,    -1,    65,    66,    -1,     6,     7,     8,    71,    10,
    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    -1,    -1,    -1,    -1,    -1,    49,    50,
    -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    -1,    -1,    63,    -1,    -1,    66
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not __GNUC__ */
#if HAVE_ALLOCA_H
#include <alloca.h>
#else /* not HAVE_ALLOCA_H */
#ifdef _AIX
 #pragma alloca
#else /* not _AIX */
char *alloca ();
#endif /* not _AIX */
#endif /* not HAVE_ALLOCA_H */
#endif /* not __GNUC__ */

extern void yyerror(char* s);

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if (defined (MSDOS) && !defined (__TURBOC__)) || defined (WIN32)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
static int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     size_t count;
{
  register char *f = from;
  register char *t = to;
  register size_t i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, size_t count)
{
  register char *f = from;
  register char *t = to;
  register size_t i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifndef YYPARSE_PARAM_DECL
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif 
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

extern YY_DECL;

int
yyparse(YYPARSE_PARAM_DECL YYPARSE_PARAM) {
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  size_t yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      size_t size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 190 "hlslang.y"
{
        // The symbol table search was done in the lexical phase
        const TSymbol* symbol = yyvsp[0].lex.symbol;
        const TVariable* variable;
        if (symbol == 0) {
            parseContext.error(yyvsp[0].lex.line, "undeclared identifier", yyvsp[0].lex.string->c_str(), "");
            parseContext.recover();
            TType type(EbtFloat, EbpUndefined);
            TVariable* fakeVariable = new TVariable(yyvsp[0].lex.string, type);
            parseContext.symbolTable.insert(*fakeVariable);
            variable = fakeVariable;
        } else {
            // This identifier can only be a variable type symbol 
            if (! symbol->isVariable()) {
                parseContext.error(yyvsp[0].lex.line, "variable expected", yyvsp[0].lex.string->c_str(), "");
                parseContext.recover();
            }
            variable = static_cast<const TVariable*>(symbol);
        }

        // don't delete $1.string, it's used by error recovery, and the pool
        // pop will reclaim the memory

        if (variable->getType().getQualifier() == EvqConst ) {
            constUnion* constArray = variable->getConstPointer();
            TType t(variable->getType());
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(constArray, t, yyvsp[0].lex.line);        
        } else
            yyval.interm.intermTypedNode = parseContext.intermediate.addSymbol(variable->getUniqueId(), 
                                                     variable->getName(),
                                                     variable->getInfo(), 
                                                     variable->getType(), yyvsp[0].lex.line);
    ;
    break;}
case 2:
#line 226 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 3:
#line 229 "hlslang.y"
{        
        constUnion *unionArray = new constUnion[1];
        unionArray->setIConst(yyvsp[0].lex.i);
        yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtInt, EbpUndefined, EvqConst), yyvsp[0].lex.line);
    ;
    break;}
case 4:
#line 234 "hlslang.y"
{
        constUnion *unionArray = new constUnion[1];
        unionArray->setFConst(yyvsp[0].lex.f);
        yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtFloat, EbpUndefined, EvqConst), yyvsp[0].lex.line);
    ;
    break;}
case 5:
#line 239 "hlslang.y"
{
        constUnion *unionArray = new constUnion[1];
        unionArray->setBConst(yyvsp[0].lex.b);
        yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EbpUndefined, EvqConst), yyvsp[0].lex.line);
    ;
    break;}
case 6:
#line 244 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[-1].interm.intermTypedNode;
    ;
    break;}
case 7:
#line 250 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 8:
#line 253 "hlslang.y"
{
        if (!yyvsp[-3].interm.intermTypedNode) {
            parseContext.error(yyvsp[-2].lex.line, " left of '[' is null ", "expression", "");
            YYERROR;
        }
        if (!yyvsp[-3].interm.intermTypedNode->isArray() && !yyvsp[-3].interm.intermTypedNode->isMatrix() && !yyvsp[-3].interm.intermTypedNode->isVector()) {
            if (yyvsp[-3].interm.intermTypedNode->getAsSymbolNode())
                parseContext.error(yyvsp[-2].lex.line, " left of '[' is not of type array, matrix, or vector ", yyvsp[-3].interm.intermTypedNode->getAsSymbolNode()->getSymbol().c_str(), "");
            else
                parseContext.error(yyvsp[-2].lex.line, " left of '[' is not of type array, matrix, or vector ", "expression", "");
            parseContext.recover();
        }
        if (yyvsp[-3].interm.intermTypedNode->getType().getQualifier() == EvqConst && yyvsp[-1].interm.intermTypedNode->getQualifier() == EvqConst) {
            if (yyvsp[-3].interm.intermTypedNode->isArray()) { // constant folding for arrays
                yyval.interm.intermTypedNode = parseContext.addConstArrayNode(yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst(), yyvsp[-3].interm.intermTypedNode, yyvsp[-2].lex.line);
            } else if (yyvsp[-3].interm.intermTypedNode->isVector()) {  // constant folding for vectors
                TVectorFields fields;                
                fields.num = 1;
                fields.offsets[0] = yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst(); // need to do it this way because v.xy sends fields integer array
                yyval.interm.intermTypedNode = parseContext.addConstVectorNode(fields, yyvsp[-3].interm.intermTypedNode, yyvsp[-2].lex.line);
            } else if (yyvsp[-3].interm.intermTypedNode->isMatrix()) { // constant folding for matrices
                yyval.interm.intermTypedNode = parseContext.addConstMatrixNode(yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst(), yyvsp[-3].interm.intermTypedNode, yyvsp[-2].lex.line);
            } 
        } else {
            if (yyvsp[-1].interm.intermTypedNode->getQualifier() == EvqConst) {
                if ((yyvsp[-3].interm.intermTypedNode->isVector() || yyvsp[-3].interm.intermTypedNode->isMatrix()) && yyvsp[-3].interm.intermTypedNode->getType().getNominalSize() <= yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst() && !yyvsp[-3].interm.intermTypedNode->isArray() ) {
                    parseContext.error(yyvsp[-2].lex.line, "", "[", "field selection out of range '%d'", yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst());
                    parseContext.recover();
                } else {
                    if (yyvsp[-3].interm.intermTypedNode->isArray()) {
                        if (yyvsp[-3].interm.intermTypedNode->getType().getArraySize() == 0) {
                            if (yyvsp[-3].interm.intermTypedNode->getType().getMaxArraySize() <= yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst()) {
                                if (parseContext.arraySetMaxSize(yyvsp[-3].interm.intermTypedNode->getAsSymbolNode(), yyvsp[-3].interm.intermTypedNode->getTypePointer(), yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst(), true, yyvsp[-2].lex.line))
                                    parseContext.recover(); 
                            } else {
                                if (parseContext.arraySetMaxSize(yyvsp[-3].interm.intermTypedNode->getAsSymbolNode(), yyvsp[-3].interm.intermTypedNode->getTypePointer(), 0, false, yyvsp[-2].lex.line))
                                    parseContext.recover(); 
                            }
                        } else if ( yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst() >= yyvsp[-3].interm.intermTypedNode->getType().getArraySize()) {
                            parseContext.error(yyvsp[-2].lex.line, "", "[", "array index out of range '%d'", yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst());
                            parseContext.recover();
                        }
                    }
                    yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpIndexDirect, yyvsp[-3].interm.intermTypedNode, yyvsp[-1].interm.intermTypedNode, yyvsp[-2].lex.line);
                }
            } else {
                if (yyvsp[-3].interm.intermTypedNode->isArray() && yyvsp[-3].interm.intermTypedNode->getType().getArraySize() == 0) {
                    parseContext.error(yyvsp[-2].lex.line, "", "[", "array must be redeclared with a size before being indexed with a variable");
                    parseContext.recover();
                }
                
                yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpIndexIndirect, yyvsp[-3].interm.intermTypedNode, yyvsp[-1].interm.intermTypedNode, yyvsp[-2].lex.line);
            }
        } 
        if (yyval.interm.intermTypedNode == 0) {
            constUnion *unionArray = new constUnion[1];
            unionArray->setFConst(0.0f);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtFloat, EbpUndefined, EvqConst), yyvsp[-2].lex.line);
        } else if (yyvsp[-3].interm.intermTypedNode->isArray()) {
            if (yyvsp[-3].interm.intermTypedNode->getType().getStruct())
                yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getType().getStruct(), yyvsp[-3].interm.intermTypedNode->getType().getTypeName(), EbpUndefined, yyvsp[-3].interm.intermTypedNode->getLine()));
            else
                yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), yyvsp[-3].interm.intermTypedNode->getPrecision(), EvqTemporary, yyvsp[-3].interm.intermTypedNode->getNominalSize(), yyvsp[-3].interm.intermTypedNode->isMatrix()));
                
            if (yyvsp[-3].interm.intermTypedNode->getType().getQualifier() == EvqConst)
                yyval.interm.intermTypedNode->getTypePointer()->changeQualifier(EvqConst);
        } else if (yyvsp[-3].interm.intermTypedNode->isMatrix() && yyvsp[-3].interm.intermTypedNode->getType().getQualifier() == EvqConst)         
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), yyvsp[-3].interm.intermTypedNode->getPrecision(), EvqConst, yyvsp[-3].interm.intermTypedNode->getNominalSize()));     
        else if (yyvsp[-3].interm.intermTypedNode->isMatrix())            
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), yyvsp[-3].interm.intermTypedNode->getPrecision(), EvqTemporary, yyvsp[-3].interm.intermTypedNode->getNominalSize()));     
        else if (yyvsp[-3].interm.intermTypedNode->isVector() && yyvsp[-3].interm.intermTypedNode->getType().getQualifier() == EvqConst)          
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), yyvsp[-3].interm.intermTypedNode->getPrecision(), EvqConst));
        else if (yyvsp[-3].interm.intermTypedNode->isVector())       
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), yyvsp[-3].interm.intermTypedNode->getPrecision(), EvqTemporary));
        else
            yyval.interm.intermTypedNode->setType(yyvsp[-3].interm.intermTypedNode->getType()); 
    ;
    break;}
case 9:
#line 330 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 10:
#line 333 "hlslang.y"
{      
		if (!yyvsp[-2].interm.intermTypedNode) {
            parseContext.error(yyvsp[0].lex.line, "field selection on null object", ".", "");
            YYERROR;
		}  
        if (yyvsp[-2].interm.intermTypedNode->isArray()) {
            parseContext.error(yyvsp[0].lex.line, "cannot apply dot operator to an array", ".", "");
            parseContext.recover();
        }

        if (yyvsp[-2].interm.intermTypedNode->isVector()) {
            TVectorFields fields;
            if (! parseContext.parseVectorFields(*yyvsp[0].lex.string, yyvsp[-2].interm.intermTypedNode->getNominalSize(), fields, yyvsp[0].lex.line)) {
                fields.num = 1;
                fields.offsets[0] = 0;
                parseContext.recover();
            }

            if (yyvsp[-2].interm.intermTypedNode->getType().getQualifier() == EvqConst) { // constant folding for vector fields
                yyval.interm.intermTypedNode = parseContext.addConstVectorNode(fields, yyvsp[-2].interm.intermTypedNode, yyvsp[0].lex.line);
                if (yyval.interm.intermTypedNode == 0) {
                    parseContext.recover();
                    yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
                }
                else
                    yyval.interm.intermTypedNode->setType(TType(yyvsp[-2].interm.intermTypedNode->getBasicType(), yyvsp[-2].interm.intermTypedNode->getPrecision(), EvqConst, (int) (*yyvsp[0].lex.string).size()));
            } else {
                if (fields.num == 1) {
                    constUnion *unionArray = new constUnion[1];
                    unionArray->setIConst(fields.offsets[0]);
                    TIntermTyped* index = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtInt, EbpUndefined, EvqConst), yyvsp[0].lex.line);
                    yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpIndexDirect, yyvsp[-2].interm.intermTypedNode, index, yyvsp[-1].lex.line);
                    yyval.interm.intermTypedNode->setType(TType(yyvsp[-2].interm.intermTypedNode->getBasicType(), yyvsp[-2].interm.intermTypedNode->getPrecision()));
                } else {
                    TString vectorString = *yyvsp[0].lex.string;
                    TIntermTyped* index = parseContext.intermediate.addSwizzle(fields, yyvsp[0].lex.line);                
                    yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpVectorSwizzle, yyvsp[-2].interm.intermTypedNode, index, yyvsp[-1].lex.line);
                    yyval.interm.intermTypedNode->setType(TType(yyvsp[-2].interm.intermTypedNode->getBasicType(), yyvsp[-2].interm.intermTypedNode->getPrecision(), EvqTemporary, (int) vectorString.size()));  
                }
            }
        } else if (yyvsp[-2].interm.intermTypedNode->isMatrix()) {
            TVectorFields fields;
            if (! parseContext.parseMatrixFields(*yyvsp[0].lex.string, yyvsp[-2].interm.intermTypedNode->getNominalSize(), fields, yyvsp[0].lex.line)) {
                fields.num = 1;
                fields.offsets[0] = 0;
                parseContext.recover();
            }

            TString vectorString = *yyvsp[0].lex.string;
            TIntermTyped* index = parseContext.intermediate.addSwizzle(fields, yyvsp[0].lex.line);                
            yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpMatrixSwizzle, yyvsp[-2].interm.intermTypedNode, index, yyvsp[-1].lex.line);
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-2].interm.intermTypedNode->getBasicType(), yyvsp[-2].interm.intermTypedNode->getPrecision(), EvqTemporary, fields.num));
                    
        } else if (yyvsp[-2].interm.intermTypedNode->getBasicType() == EbtStruct) {
            bool fieldFound = false;
            TTypeList* fields = yyvsp[-2].interm.intermTypedNode->getType().getStruct();
            if (fields == 0) {
                parseContext.error(yyvsp[-1].lex.line, "structure has no fields", "Internal Error", "");
                parseContext.recover();
                yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
            } else {
                unsigned int i;
                for (i = 0; i < fields->size(); ++i) {
                    if ((*fields)[i].type->getFieldName() == *yyvsp[0].lex.string) {
                        fieldFound = true;
                        break;
                    }                
                }
                if (fieldFound) {
                    if (yyvsp[-2].interm.intermTypedNode->getType().getQualifier() == EvqConst) {
                        yyval.interm.intermTypedNode = parseContext.addConstStruct(*yyvsp[0].lex.string, yyvsp[-2].interm.intermTypedNode, yyvsp[-1].lex.line);
                        if (yyval.interm.intermTypedNode == 0) {
                            parseContext.recover();
                            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
                        }
                        else {
                            yyval.interm.intermTypedNode->setType(*(*fields)[i].type);
                            // change the qualifier of the return type, not of the structure field
                            // as the structure definition is shared between various structures.
                            yyval.interm.intermTypedNode->getTypePointer()->changeQualifier(EvqConst);
                        }
                    } else {
                        constUnion *unionArray = new constUnion[1];
                        unionArray->setIConst(i);
                        TIntermTyped* index = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtInt, EbpUndefined, EvqConst), yyvsp[0].lex.line);
                        yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpIndexDirectStruct, yyvsp[-2].interm.intermTypedNode, index, yyvsp[-1].lex.line);                
                        yyval.interm.intermTypedNode->setType(*(*fields)[i].type);
                    }
                } else {
                    parseContext.error(yyvsp[-1].lex.line, " no such field in structure", yyvsp[0].lex.string->c_str(), "");
                    parseContext.recover();
                    yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
                }
            }
        } else if (yyvsp[-2].interm.intermTypedNode->getNominalSize() == 1) {

            // HLSL allows ".xxxx" field selection on single component floats.  Handle that here.
            TVectorFields fields;

            // Check to make sure only the "x" component is accessed.
            if (! parseContext.parseVectorFields(*yyvsp[0].lex.string, yyvsp[-2].interm.intermTypedNode->getNominalSize(), fields, yyvsp[0].lex.line)) {
                fields.num = 1;
                fields.offsets[0] = 0;
                parseContext.recover();
            }

            // Create the appropriate constructor based on the number of ".x"'s there are in the selection field
            TString vectorString = *yyvsp[0].lex.string;
            TQualifier qualifier = yyvsp[-2].interm.intermTypedNode->getType().getQualifier() == EvqConst ? EvqConst : EvqTemporary;
            TType type(yyvsp[-2].interm.intermTypedNode->getBasicType(), yyvsp[-2].interm.intermTypedNode->getPrecision(), qualifier, (int) vectorString.size());
            yyval.interm.intermTypedNode = parseContext.constructBuiltIn(&type, parseContext.getConstructorOp(type),
                                               yyval.interm.intermTypedNode, yyvsp[-2].interm.intermTypedNode->getLine(), false);
        } else {
            parseContext.error(yyvsp[-1].lex.line, " field selection requires structure, vector, or matrix on left hand side", yyvsp[0].lex.string->c_str(), "");
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
        // don't delete $3.string, it's from the pool
    ;
    break;}
case 11:
#line 452 "hlslang.y"
{
        if (parseContext.lValueErrorCheck(yyvsp[0].lex.line, "++", yyvsp[-1].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(EOpPostIncrement, yyvsp[-1].interm.intermTypedNode, yyvsp[0].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.unaryOpError(yyvsp[0].lex.line, "++", yyvsp[-1].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-1].interm.intermTypedNode;
        }
    ;
    break;}
case 12:
#line 462 "hlslang.y"
{
        if (parseContext.lValueErrorCheck(yyvsp[0].lex.line, "--", yyvsp[-1].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(EOpPostDecrement, yyvsp[-1].interm.intermTypedNode, yyvsp[0].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.unaryOpError(yyvsp[0].lex.line, "--", yyvsp[-1].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-1].interm.intermTypedNode;
        }
    ;
    break;}
case 13:
#line 475 "hlslang.y"
{
        if (parseContext.integerErrorCheck(yyvsp[0].interm.intermTypedNode, "[]"))
            parseContext.recover();
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; 
    ;
    break;}
case 14:
#line 483 "hlslang.y"
{
        TFunction* fnCall = yyvsp[0].interm.function;
        TOperator op = fnCall->getBuiltInOp();
        
        if (op == EOpArrayLength) {
            if (yyvsp[0].interm.intermNode->getAsTyped() == 0 || yyvsp[0].interm.intermNode->getAsTyped()->getType().getArraySize() == 0) {
                parseContext.error(yyvsp[0].interm.line, "", fnCall->getName().c_str(), "array must be declared with a size before using this method");
                parseContext.recover();
            }

            constUnion *unionArray = new constUnion[1];
            unionArray->setIConst(yyvsp[0].interm.intermNode->getAsTyped()->getType().getArraySize());
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtInt, EbpUndefined, EvqConst), yyvsp[0].interm.line);
        } else if (op != EOpNull) {
            //
            // Then this should be a constructor.
            // Don't go through the symbol table for constructors.  
            // Their parameters will be verified algorithmically.
            //
            TType type(EbtVoid, EbpUndefined);  // use this to get the type back
            if (parseContext.constructorErrorCheck(yyvsp[0].interm.line, yyvsp[0].interm.intermNode, *fnCall, op, &type)) {
                yyval.interm.intermTypedNode = 0;
            } else {
                //
                // It's a constructor, of type 'type'.
                //
                yyval.interm.intermTypedNode = parseContext.addConstructor(yyvsp[0].interm.intermNode, &type, op, fnCall, yyvsp[0].interm.line);
            }
            
            if (yyval.interm.intermTypedNode == 0) {        
                parseContext.recover();
                yyval.interm.intermTypedNode = parseContext.intermediate.setAggregateOperator(0, op, yyvsp[0].interm.line);
            }
            yyval.interm.intermTypedNode->setType(type);
        } else {
            //
            // Not a constructor.  Find it in the symbol table.
            //
            const TFunction* fnCandidate;
            bool builtIn;
            fnCandidate = parseContext.findFunction(yyvsp[0].interm.line, fnCall, &builtIn);
            
            if ( fnCandidate && fnCandidate->getMangledName() != fnCall->getMangledName()) {
                //add constructors to arguments to ensure that they have proper types
                TIntermNode *temp = parseContext.promoteFunctionArguments( yyvsp[0].interm.intermNode,
                                      fnCandidate);
                if (temp)
                    yyvsp[0].interm.intermNode = temp;
                else {
                    parseContext.error( yyvsp[0].interm.intermNode->getLine(), " unable to suitably promote arguments to function",
                                        fnCandidate->getName().c_str(), "");
                    fnCandidate = 0;
                }
            }
            
            if (fnCandidate) {
                //
                // A declared function.  But, it might still map to a built-in
                // operation.
                //
                op = fnCandidate->getBuiltInOp();
                if (builtIn && op != EOpNull) {
                    //
                    // A function call mapped to a built-in operation.
                    //
                    if (fnCandidate->getParamCount() == 1) {
                        //
                        // Treat it like a built-in unary operator.
                        //
                        yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(op, yyvsp[0].interm.intermNode, 0, parseContext.symbolTable);
                        if (yyval.interm.intermTypedNode == 0)  {
                            parseContext.error(yyvsp[0].interm.intermNode->getLine(), " wrong operand type", "Internal Error", 
                                "built in unary operator function.  Type: %s",
                                static_cast<TIntermTyped*>(yyvsp[0].interm.intermNode)->getCompleteString().c_str());
                            YYERROR;
                        }
                    } else {
                        yyval.interm.intermTypedNode = parseContext.intermediate.setAggregateOperator(yyvsp[0].interm.intermAggregate, op, yyvsp[0].interm.line);
                    }
                } else {
                    // This is a real function call
                    
                    yyval.interm.intermTypedNode = parseContext.intermediate.setAggregateOperator(yyvsp[0].interm.intermAggregate, EOpFunctionCall, yyvsp[0].interm.line);
                    yyval.interm.intermTypedNode->setType(fnCandidate->getReturnType());                   
                    
                    yyval.interm.intermTypedNode->getAsAggregate()->setName(fnCandidate->getMangledName());
                    yyval.interm.intermTypedNode->getAsAggregate()->setPlainName(fnCandidate->getName());

                    TQualifier qual;
                    for (int i = 0; i < fnCandidate->getParamCount(); ++i) {
                        qual = (*fnCandidate)[i].type->getQualifier();
                        if (qual == EvqOut || qual == EvqInOut) {
                            if (parseContext.lValueErrorCheck(yyval.interm.intermTypedNode->getLine(), "assign", yyval.interm.intermTypedNode->getAsAggregate()->getSequence()[i]->getAsTyped())) {
                                parseContext.error(yyvsp[0].interm.intermNode->getLine(), "Constant value cannot be passed for 'out' or 'inout' parameters.", "Error", "");
                                parseContext.recover();
                            }
                        }
                    }
                }
                yyval.interm.intermTypedNode->setType(fnCandidate->getReturnType());
            } else {
                // error message was put out by PaFindFunction()
                // Put on a dummy node for error recovery
                constUnion *unionArray = new constUnion[1];
                unionArray->setFConst(0.0f);
                yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtFloat, EbpUndefined, EvqConst), yyvsp[0].interm.line);
                parseContext.recover();
            }
        }
        delete fnCall;
    ;
    break;}
case 15:
#line 597 "hlslang.y"
{
        yyval.interm = yyvsp[0].interm;
    ;
    break;}
case 16:
#line 600 "hlslang.y"
{
        if (yyvsp[-2].interm.intermTypedNode->isArray() && yyvsp[0].interm.function->getName() == "length") {
            //
            // implement array.length()
            //            
            yyval.interm = yyvsp[0].interm;
            yyval.interm.intermNode = yyvsp[-2].interm.intermTypedNode;
            yyval.interm.function->relateToOperator(EOpArrayLength);
            
        } else {
            parseContext.error(yyvsp[0].interm.line, "methods are not supported", "", "");
            parseContext.recover();
            yyval.interm = yyvsp[0].interm;
        }
    ;
    break;}
case 17:
#line 618 "hlslang.y"
{
        yyval.interm = yyvsp[-1].interm;
        yyval.interm.line = yyvsp[0].lex.line;
    ;
    break;}
case 18:
#line 622 "hlslang.y"
{
        yyval.interm = yyvsp[-1].interm;
        yyval.interm.line = yyvsp[0].lex.line;
    ;
    break;}
case 19:
#line 629 "hlslang.y"
{
        yyval.interm.function = yyvsp[-1].interm.function;
        yyval.interm.intermNode = 0;
    ;
    break;}
case 20:
#line 633 "hlslang.y"
{
        yyval.interm.function = yyvsp[0].interm.function;
        yyval.interm.intermNode = 0;
    ;
    break;}
case 21:
#line 640 "hlslang.y"
{
		if (!yyvsp[0].interm.intermTypedNode) {
          YYERROR;
		}
		TParameter param = { 0, 0, new TType(yyvsp[0].interm.intermTypedNode->getType()) };
        yyvsp[-1].interm.function->addParameter(param);
        yyval.interm.function = yyvsp[-1].interm.function;
        yyval.interm.intermNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 22:
#line 649 "hlslang.y"
{
		if (!yyvsp[0].interm.intermTypedNode) {
          YYERROR;
		}
        TParameter param = { 0, 0, new TType(yyvsp[0].interm.intermTypedNode->getType()) };
        yyvsp[-2].interm.function->addParameter(param);
        yyval.interm.function = yyvsp[-2].interm.function;
        yyval.interm.intermNode = parseContext.intermediate.growAggregate(yyvsp[-2].interm.intermNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line);
    ;
    break;}
case 23:
#line 661 "hlslang.y"
{
        yyval.interm.function = yyvsp[-1].interm.function;
    ;
    break;}
case 24:
#line 669 "hlslang.y"
{
        //
        // Constructor
        //
        if (yyvsp[0].interm.type.array) {
            //TODO : figure out how to deal with array constructors            
        }

        if (yyvsp[0].interm.type.userDef) {
            TString tempString = "";
            TType type(yyvsp[0].interm.type);
            TFunction *function = new TFunction(&tempString, type, EOpConstructStruct);
            yyval.interm.function = function;
        } else {
            TOperator op = EOpNull;
            switch (yyvsp[0].interm.type.type) {
            case EbtFloat:
                if (yyvsp[0].interm.type.matrix) {
                    switch(yyvsp[0].interm.type.size) {
                    case 2:                                     op = EOpConstructMat2;  break;
                    case 3:                                     op = EOpConstructMat3;  break;
                    case 4:                                     op = EOpConstructMat4;  break;
                    }         
                } else {      
                    switch(yyvsp[0].interm.type.size) {
                    case 1:                                     op = EOpConstructFloat; break;
                    case 2:                                     op = EOpConstructVec2;  break;
                    case 3:                                     op = EOpConstructVec3;  break;
                    case 4:                                     op = EOpConstructVec4;  break;
                    }       
                }  
                break;               
            case EbtInt:
                switch(yyvsp[0].interm.type.size) {
                case 1:                                         op = EOpConstructInt;   break;
                case 2:       FRAG_VERT_ONLY("ivec2", yyvsp[0].interm.type.line); op = EOpConstructIVec2; break;
                case 3:       FRAG_VERT_ONLY("ivec3", yyvsp[0].interm.type.line); op = EOpConstructIVec3; break;
                case 4:       FRAG_VERT_ONLY("ivec4", yyvsp[0].interm.type.line); op = EOpConstructIVec4; break;
                }         
                break;    
            case EbtBool:
                switch(yyvsp[0].interm.type.size) {
                case 1:                                         op = EOpConstructBool;  break;
                case 2:       FRAG_VERT_ONLY("bvec2", yyvsp[0].interm.type.line); op = EOpConstructBVec2; break;
                case 3:       FRAG_VERT_ONLY("bvec3", yyvsp[0].interm.type.line); op = EOpConstructBVec3; break;
                case 4:       FRAG_VERT_ONLY("bvec4", yyvsp[0].interm.type.line); op = EOpConstructBVec4; break;
                }         
                break;
            }
            if (op == EOpNull) {                    
                parseContext.error(yyvsp[0].interm.type.line, "cannot construct this type", TType::getBasicString(yyvsp[0].interm.type.type), "");
                parseContext.recover();
                yyvsp[0].interm.type.type = EbtFloat;
                op = EOpConstructFloat;
            }            
            TString tempString = "";
            TType type(yyvsp[0].interm.type);
            TFunction *function = new TFunction(&tempString, type, op);
            yyval.interm.function = function;
        }
    ;
    break;}
case 25:
#line 730 "hlslang.y"
{
        if (parseContext.reservedErrorCheck(yyvsp[0].lex.line, *yyvsp[0].lex.string)) 
            parseContext.recover();
        TType type(EbtVoid, EbpUndefined);
	const TString *mangled;
	if ( *yyvsp[0].lex.string == "main")
	    mangled = NewPoolTString("xlat_main");
	else
	    mangled = yyvsp[0].lex.string;
        TFunction *function = new TFunction( mangled, type);
        yyval.interm.function = function;
    ;
    break;}
case 26:
#line 742 "hlslang.y"
{
        if (parseContext.reservedErrorCheck(yyvsp[0].lex.line, *yyvsp[0].lex.string)) 
            parseContext.recover();
        TType type(EbtVoid, EbpUndefined);
        TFunction *function = new TFunction(yyvsp[0].lex.string, type);
        yyval.interm.function = function;
    ;
    break;}
case 27:
#line 752 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 28:
#line 755 "hlslang.y"
{
        if (parseContext.lValueErrorCheck(yyvsp[-1].lex.line, "++", yyvsp[0].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(EOpPreIncrement, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.unaryOpError(yyvsp[-1].lex.line, "++", yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        }
    ;
    break;}
case 29:
#line 765 "hlslang.y"
{
        if (parseContext.lValueErrorCheck(yyvsp[-1].lex.line, "--", yyvsp[0].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(EOpPreDecrement, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.unaryOpError(yyvsp[-1].lex.line, "--", yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        }
    ;
    break;}
case 30:
#line 775 "hlslang.y"
{
        if (yyvsp[-1].interm.op != EOpNull) {
            yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(yyvsp[-1].interm.op, yyvsp[0].interm.intermTypedNode, yyvsp[-1].interm.line, parseContext.symbolTable);
            if (yyval.interm.intermTypedNode == 0) {
                const char* errorOp = "";
                switch(yyvsp[-1].interm.op) {
                case EOpNegative:   errorOp = "-"; break;
                case EOpLogicalNot: errorOp = "!"; break;
                case EOpBitwiseNot: errorOp = "~"; break;
				default: break;
                }
                parseContext.unaryOpError(yyvsp[-1].interm.line, const_cast<char*> (errorOp), yyvsp[0].interm.intermTypedNode->getCompleteString());
                parseContext.recover();
                yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
            }
        } else
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 31:
#line 793 "hlslang.y"
{
        // cast operator, insert constructor
        TOperator op = EOpNull;
        switch (yyvsp[-2].interm.type.type) {
        case EbtFloat:
            if (yyvsp[-2].interm.type.matrix) {
                switch(yyvsp[-2].interm.type.size) {
                case 2:                                     op = EOpConstructMat2;  break;
                case 3:                                     op = EOpConstructMat3;  break;
                case 4:                                     op = EOpConstructMat4;  break;
                }         
            } else {      
                switch(yyvsp[-2].interm.type.size) {
                case 1:                                     op = EOpConstructFloat; break;
                case 2:                                     op = EOpConstructVec2;  break;
                case 3:                                     op = EOpConstructVec3;  break;
                case 4:                                     op = EOpConstructVec4;  break;
                }       
            }  
            break;               
        case EbtInt:
            switch(yyvsp[-2].interm.type.size) {
            case 1:                                         op = EOpConstructInt;   break;
            case 2:       FRAG_VERT_ONLY("ivec2", yyvsp[-2].interm.type.line); op = EOpConstructIVec2; break;
            case 3:       FRAG_VERT_ONLY("ivec3", yyvsp[-2].interm.type.line); op = EOpConstructIVec3; break;
            case 4:       FRAG_VERT_ONLY("ivec4", yyvsp[-2].interm.type.line); op = EOpConstructIVec4; break;
            }         
            break;    
        case EbtBool:
            switch(yyvsp[-2].interm.type.size) {
            case 1:                                         op = EOpConstructBool;  break;
            case 2:       FRAG_VERT_ONLY("bvec2", yyvsp[-2].interm.type.line); op = EOpConstructBVec2; break;
            case 3:       FRAG_VERT_ONLY("bvec3", yyvsp[-2].interm.type.line); op = EOpConstructBVec3; break;
            case 4:       FRAG_VERT_ONLY("bvec4", yyvsp[-2].interm.type.line); op = EOpConstructBVec4; break;
            }         
            break;
        case EbtStruct:
            op = EOpConstructStruct;
            break;
        }
        if (op == EOpNull) {                    
            parseContext.error(yyvsp[-2].interm.type.line, "cannot cast this type", TType::getBasicString(yyvsp[-2].interm.type.type), "");
            parseContext.recover();
            yyvsp[-2].interm.type.type = EbtFloat;
            op = EOpConstructFloat;
        }            
        TString tempString = "";
        TType type(yyvsp[-2].interm.type);
        TFunction *function = new TFunction(&tempString, type, op);
        TParameter param = { 0, 0, new TType(yyvsp[0].interm.intermTypedNode->getType()) };
        function->addParameter(param);
        TType type2(EbtVoid, EbpUndefined);  // use this to get the type back
        if (parseContext.constructorErrorCheck(yyvsp[-2].interm.type.line, yyvsp[0].interm.intermTypedNode, *function, op, &type2)) {
            yyval.interm.intermTypedNode = 0;
        } else {
            //
            // It's a constructor, of type 'type'.
            //
            yyval.interm.intermTypedNode = parseContext.addConstructor(yyvsp[0].interm.intermTypedNode, &type2, op, function, yyvsp[-2].interm.type.line);
        }
        
        if (yyval.interm.intermTypedNode == 0) {        
            parseContext.recover();
            yyval.interm.intermTypedNode = parseContext.intermediate.setAggregateOperator(0, op, yyvsp[-2].interm.type.line);
        }
        yyval.interm.intermTypedNode->setType(type2);
    ;
    break;}
case 32:
#line 864 "hlslang.y"
{ yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpNull; ;
    break;}
case 33:
#line 865 "hlslang.y"
{ yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpNegative; ;
    break;}
case 34:
#line 866 "hlslang.y"
{ yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpLogicalNot; ;
    break;}
case 35:
#line 867 "hlslang.y"
{ UNSUPPORTED_FEATURE("~", yyvsp[0].lex.line);  
              yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpBitwiseNot; ;
    break;}
case 36:
#line 873 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 37:
#line 874 "hlslang.y"
{
        FRAG_VERT_ONLY("*", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpMul, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "*", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 38:
#line 883 "hlslang.y"
{
        FRAG_VERT_ONLY("/", yyvsp[-1].lex.line); 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpDiv, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "/", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 39:
#line 892 "hlslang.y"
{
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpMod, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "%", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 40:
#line 903 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 41:
#line 904 "hlslang.y"
{  
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpAdd, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "+", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 42:
#line 912 "hlslang.y"
{
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpSub, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "-", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        } 
    ;
    break;}
case 43:
#line 923 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 44:
#line 924 "hlslang.y"
{
        UNSUPPORTED_FEATURE("<<", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLeftShift, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "<<", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 45:
#line 933 "hlslang.y"
{
        UNSUPPORTED_FEATURE(">>", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpRightShift, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, ">>", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 46:
#line 945 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 47:
#line 946 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLessThan, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "<", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EbpUndefined, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 48:
#line 956 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpGreaterThan, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, ">", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EbpUndefined, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 49:
#line 966 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLessThanEqual, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "<=", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EbpUndefined, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 50:
#line 976 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpGreaterThanEqual, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, ">=", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EbpUndefined, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 51:
#line 989 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 52:
#line 990 "hlslang.y"
{
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpEqual, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "==", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EbpUndefined, EvqConst), yyvsp[-1].lex.line);
        } else if ((yyvsp[-2].interm.intermTypedNode->isArray() || yyvsp[0].interm.intermTypedNode->isArray()))
            parseContext.recover();
    ;
    break;}
case 53:
#line 1001 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpNotEqual, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "!=", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EbpUndefined, EvqConst), yyvsp[-1].lex.line);
        } else if ((yyvsp[-2].interm.intermTypedNode->isArray() || yyvsp[0].interm.intermTypedNode->isArray()))
            parseContext.recover();
    ;
    break;}
case 54:
#line 1015 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 55:
#line 1016 "hlslang.y"
{
        UNSUPPORTED_FEATURE("&", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpAnd, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "&", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 56:
#line 1028 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 57:
#line 1029 "hlslang.y"
{
        UNSUPPORTED_FEATURE("^", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpExclusiveOr, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "^", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 58:
#line 1041 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 59:
#line 1042 "hlslang.y"
{
        UNSUPPORTED_FEATURE("|", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpInclusiveOr, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "|", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 60:
#line 1054 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 61:
#line 1055 "hlslang.y"
{
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLogicalAnd, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "&&", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EbpUndefined, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 62:
#line 1068 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 63:
#line 1069 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLogicalXor, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "^^", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EbpUndefined, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 64:
#line 1082 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 65:
#line 1083 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLogicalOr, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "||", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EbpUndefined, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 66:
#line 1096 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 67:
#line 1097 "hlslang.y"
{
       if (parseContext.boolOrVectorErrorCheck(yyvsp[-3].lex.line, yyvsp[-4].interm.intermTypedNode))
            parseContext.recover();
       
		yyval.interm.intermTypedNode = parseContext.intermediate.addSelection(yyvsp[-4].interm.intermTypedNode, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-3].lex.line);
           
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-3].lex.line, ":", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        }
    ;
    break;}
case 68:
#line 1112 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 69:
#line 1113 "hlslang.y"
{        
        if (parseContext.lValueErrorCheck(yyvsp[-1].interm.line, "assign", yyvsp[-2].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = parseContext.addAssign(yyvsp[-1].interm.op, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].interm.line);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.assignError(yyvsp[-1].interm.line, "assign", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        } else if ((yyvsp[-2].interm.intermTypedNode->isArray() || yyvsp[0].interm.intermTypedNode->isArray()))
            parseContext.recover();
    ;
    break;}
case 70:
#line 1127 "hlslang.y"
{                                    yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpAssign; ;
    break;}
case 71:
#line 1128 "hlslang.y"
{ FRAG_VERT_ONLY("*=", yyvsp[0].lex.line);     yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpMulAssign; ;
    break;}
case 72:
#line 1129 "hlslang.y"
{ FRAG_VERT_ONLY("/=", yyvsp[0].lex.line);     yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpDivAssign; ;
    break;}
case 73:
#line 1130 "hlslang.y"
{ UNSUPPORTED_FEATURE("%=", yyvsp[0].lex.line);   yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpModAssign; ;
    break;}
case 74:
#line 1131 "hlslang.y"
{                                    yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpAddAssign; ;
    break;}
case 75:
#line 1132 "hlslang.y"
{                                    yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpSubAssign; ;
    break;}
case 76:
#line 1133 "hlslang.y"
{ UNSUPPORTED_FEATURE("<<=", yyvsp[0].lex.line);  yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpLeftShiftAssign; ;
    break;}
case 77:
#line 1134 "hlslang.y"
{ UNSUPPORTED_FEATURE("<<=", yyvsp[0].lex.line);  yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpRightShiftAssign; ;
    break;}
case 78:
#line 1135 "hlslang.y"
{ UNSUPPORTED_FEATURE("&=",  yyvsp[0].lex.line);  yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpAndAssign; ;
    break;}
case 79:
#line 1136 "hlslang.y"
{ UNSUPPORTED_FEATURE("^=",  yyvsp[0].lex.line);  yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpExclusiveOrAssign; ;
    break;}
case 80:
#line 1137 "hlslang.y"
{ UNSUPPORTED_FEATURE("|=",  yyvsp[0].lex.line);  yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpInclusiveOrAssign; ;
    break;}
case 81:
#line 1141 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 82:
#line 1144 "hlslang.y"
{
        yyval.interm.intermTypedNode = parseContext.intermediate.addComma(yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, ",", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        }
    ;
    break;}
case 83:
#line 1155 "hlslang.y"
{
        if (parseContext.constErrorCheck(yyvsp[0].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 84:
#line 1163 "hlslang.y"
{ yyval.interm.intermNode = 0; ;
    break;}
case 85:
#line 1164 "hlslang.y"
{ 
        if (yyvsp[-1].interm.intermAggregate)
            yyvsp[-1].interm.intermAggregate->setOperator(EOpSequence); 
        yyval.interm.intermNode = yyvsp[-1].interm.intermAggregate; 
    ;
    break;}
case 86:
#line 1172 "hlslang.y"
{
        //
        // Multiple declarations of the same function are allowed.
        //
        // If this is a definition, the definition production code will check for redefinitions 
        // (we don't know at this point if it's a definition or not).
        //
        // Redeclarations are allowed.  But, return types and parameter qualifiers must match.
        //        
        TFunction* prevDec = static_cast<TFunction*>(parseContext.symbolTable.find(yyvsp[-1].interm.function->getMangledName()));
        if (prevDec) {
            if (prevDec->getReturnType() != yyvsp[-1].interm.function->getReturnType()) {
                parseContext.error(yyvsp[0].lex.line, "overloaded functions must have the same return type", yyvsp[-1].interm.function->getReturnType().getBasicString(), "");
                parseContext.recover();
            }
            for (int i = 0; i < prevDec->getParamCount(); ++i) {
                if ((*prevDec)[i].type->getQualifier() != (*yyvsp[-1].interm.function)[i].type->getQualifier()) {
                    parseContext.error(yyvsp[0].lex.line, "overloaded functions must have the same parameter qualifiers", (*yyvsp[-1].interm.function)[i].type->getQualifierString(), "");
                    parseContext.recover();
                }
            }
        }
        
        //
        // If this is a redeclaration, it could also be a definition,
        // in which case, we want to use the variable names from this one, and not the one that's
        // being redeclared.  So, pass back up this declaration, not the one in the symbol table.
        //
        yyval.interm.function = yyvsp[-1].interm.function;
        yyval.interm.line = yyvsp[0].lex.line;

        parseContext.symbolTable.insert(*yyval.interm.function);
    ;
    break;}
case 87:
#line 1205 "hlslang.y"
{
        //
        // Multiple declarations of the same function are allowed.
        //
        // If this is a definition, the definition production code will check for redefinitions 
        // (we don't know at this point if it's a definition or not).
        //
        // Redeclarations are allowed.  But, return types and parameter qualifiers must match.
        //        
        TFunction* prevDec = static_cast<TFunction*>(parseContext.symbolTable.find(yyvsp[-3].interm.function->getMangledName()));
        if (prevDec) {
            if (prevDec->getReturnType() != yyvsp[-3].interm.function->getReturnType()) {
                parseContext.error(yyvsp[-2].lex.line, "overloaded functions must have the same return type", yyvsp[-3].interm.function->getReturnType().getBasicString(), "");
                parseContext.recover();
            }
            for (int i = 0; i < prevDec->getParamCount(); ++i) {
                if ((*prevDec)[i].type->getQualifier() != (*yyvsp[-3].interm.function)[i].type->getQualifier()) {
                    parseContext.error(yyvsp[-2].lex.line, "overloaded functions must have the same parameter qualifiers", (*yyvsp[-3].interm.function)[i].type->getQualifierString(), "");
                    parseContext.recover();
                }
            }
        }
        
        //
        // If this is a redeclaration, it could also be a definition,
        // in which case, we want to use the variable names from this one, and not the one that's
        // being redeclared.  So, pass back up this declaration, not the one in the symbol table.
        //
        yyval.interm.function = yyvsp[-3].interm.function;
        yyval.interm.line = yyvsp[-2].lex.line;
        yyval.interm.function->setInfo(new TTypeInfo(*yyvsp[0].lex.string, 0));

        parseContext.symbolTable.insert(*yyval.interm.function);
    ;
    break;}
case 88:
#line 1242 "hlslang.y"
{
        yyval.interm.function = yyvsp[0].interm.function;
    ;
    break;}
case 89:
#line 1245 "hlslang.y"
{ 
        yyval.interm.function = yyvsp[0].interm.function;  
    ;
    break;}
case 90:
#line 1252 "hlslang.y"
{
        // Add the parameter 
        yyval.interm.function = yyvsp[-1].interm.function;
        if (yyvsp[0].interm.param.type->getBasicType() != EbtVoid)
            yyvsp[-1].interm.function->addParameter(yyvsp[0].interm.param);
        else
            delete yyvsp[0].interm.param.type;
    ;
    break;}
case 91:
#line 1260 "hlslang.y"
{   
        //
        // Only first parameter of one-parameter functions can be void
        // The check for named parameters not being void is done in parameter_declarator 
        //
        if (yyvsp[0].interm.param.type->getBasicType() == EbtVoid) {
            //
            // This parameter > first is void
            //
            parseContext.error(yyvsp[-1].lex.line, "cannot be an argument type except for '(void)'", "void", "");
            parseContext.recover();
            delete yyvsp[0].interm.param.type;
        } else {
            // Add the parameter 
            yyval.interm.function = yyvsp[-2].interm.function; 
            yyvsp[-2].interm.function->addParameter(yyvsp[0].interm.param);
        }
    ;
    break;}
case 92:
#line 1281 "hlslang.y"
{
        if (yyvsp[-2].interm.type.qualifier != EvqGlobal && yyvsp[-2].interm.type.qualifier != EvqTemporary) {
            parseContext.error(yyvsp[-1].lex.line, "no qualifiers allowed for function return", getQualifierString(yyvsp[-2].interm.type.qualifier), "");
            parseContext.recover();
        }
        // make sure a sampler is not involved as well...
        if (parseContext.structQualifierErrorCheck(yyvsp[-1].lex.line, yyvsp[-2].interm.type))
            parseContext.recover();
        
        // Add the function as a prototype after parsing it (we do not support recursion) 
        TFunction *function;
        TType type(yyvsp[-2].interm.type);
	const TString* mangled = 0;
	if ( *yyvsp[-1].lex.string == "main")
	    mangled = NewPoolTString( "xlat_main");
	else
	    mangled = yyvsp[-1].lex.string;

        function = new TFunction(mangled, type);
        yyval.interm.function = function;
    ;
    break;}
case 93:
#line 1306 "hlslang.y"
{
        if (yyvsp[-1].interm.type.type == EbtVoid) {
            parseContext.error(yyvsp[0].lex.line, "illegal use of type 'void'", yyvsp[0].lex.string->c_str(), "");
            parseContext.recover();
        }
        if (parseContext.reservedErrorCheck(yyvsp[0].lex.line, *yyvsp[0].lex.string))
            parseContext.recover();
        TParameter param = {yyvsp[0].lex.string, 0, new TType(yyvsp[-1].interm.type)};
        yyval.interm.line = yyvsp[0].lex.line;
        yyval.interm.param = param; 
    ;
    break;}
case 94:
#line 1317 "hlslang.y"
{
        if (yyvsp[-3].interm.type.type == EbtVoid) {
            parseContext.error(yyvsp[-2].lex.line, "illegal use of type 'void'", yyvsp[-2].lex.string->c_str(), "");
            parseContext.recover();
        }
        if (parseContext.reservedErrorCheck(yyvsp[-2].lex.line, *yyvsp[-2].lex.string))
            parseContext.recover();
        TParameter param = {yyvsp[-2].lex.string, 0, new TType(yyvsp[-3].interm.type)};
        yyval.interm.line = yyvsp[-2].lex.line;
        yyval.interm.param = param; 
        
        //TODO: add initializer support
    ;
    break;}
case 95:
#line 1330 "hlslang.y"
{
        // register is being ignored
        if (yyvsp[-2].interm.type.type == EbtVoid) {
            parseContext.error(yyvsp[-1].lex.line, "illegal use of type 'void'", yyvsp[-1].lex.string->c_str(), "");
            parseContext.recover();
        }
        if (parseContext.reservedErrorCheck(yyvsp[-1].lex.line, *yyvsp[-1].lex.string))
            parseContext.recover();
        TParameter param = {yyvsp[-1].lex.string, 0, new TType(yyvsp[-2].interm.type)};
        yyval.interm.line = yyvsp[-1].lex.line;
        yyval.interm.param = param; 
    ;
    break;}
case 96:
#line 1342 "hlslang.y"
{
        //Parameter with semantic
        if (yyvsp[-3].interm.type.type == EbtVoid) {
            parseContext.error(yyvsp[-2].lex.line, "illegal use of type 'void'", yyvsp[-2].lex.string->c_str(), "");
            parseContext.recover();
        }
        if (parseContext.reservedErrorCheck(yyvsp[-2].lex.line, *yyvsp[-2].lex.string))
            parseContext.recover();
        TParameter param = {yyvsp[-2].lex.string, new TTypeInfo(*yyvsp[0].lex.string, 0), new TType(yyvsp[-3].interm.type)};
        yyval.interm.line = yyvsp[-2].lex.line;
        yyval.interm.param = param; 
    ;
    break;}
case 97:
#line 1354 "hlslang.y"
{
        // Check that we can make an array out of this type
        if (parseContext.arrayTypeErrorCheck(yyvsp[-2].lex.line, yyvsp[-4].interm.type))
            parseContext.recover();
            
        if (parseContext.reservedErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string))
            parseContext.recover();
            
        int size;
        if (parseContext.arraySizeErrorCheck(yyvsp[-2].lex.line, yyvsp[-1].interm.intermTypedNode, size))
            parseContext.recover();
        yyvsp[-4].interm.type.setArray(true, size);
             
        TType* type = new TType(yyvsp[-4].interm.type);
        TParameter param = { yyvsp[-3].lex.string, 0, type };
        yyval.interm.line = yyvsp[-3].lex.line;
        yyval.interm.param = param;
    ;
    break;}
case 98:
#line 1372 "hlslang.y"
{
        // Check that we can make an array out of this type
        if (parseContext.arrayTypeErrorCheck(yyvsp[-4].lex.line, yyvsp[-6].interm.type))
            parseContext.recover();
            
        if (parseContext.reservedErrorCheck(yyvsp[-5].lex.line, *yyvsp[-5].lex.string))
            parseContext.recover();
            
        int size;
        if (parseContext.arraySizeErrorCheck(yyvsp[-4].lex.line, yyvsp[-3].interm.intermTypedNode, size))
            parseContext.recover();
        yyvsp[-6].interm.type.setArray(true, size);
             
        TType* type = new TType(yyvsp[-6].interm.type);
        TParameter param = { yyvsp[-5].lex.string, new TTypeInfo(*yyvsp[0].lex.string, 0), type };
        yyval.interm.line = yyvsp[-5].lex.line;
        yyval.interm.param = param;
    ;
    break;}
case 99:
#line 1401 "hlslang.y"
{
        yyval.interm = yyvsp[0].interm;
        if (parseContext.paramErrorCheck(yyvsp[0].interm.line, yyvsp[-2].interm.type.qualifier, yyvsp[-1].interm.qualifier, yyval.interm.param.type))
            parseContext.recover();
    ;
    break;}
case 100:
#line 1406 "hlslang.y"
{
        yyval.interm = yyvsp[0].interm;
        if (parseContext.parameterSamplerErrorCheck(yyvsp[0].interm.line, yyvsp[-1].interm.qualifier, *yyvsp[0].interm.param.type))
            parseContext.recover();
        if (parseContext.paramErrorCheck(yyvsp[0].interm.line, EvqTemporary, yyvsp[-1].interm.qualifier, yyval.interm.param.type))
            parseContext.recover();
    ;
    break;}
case 101:
#line 1416 "hlslang.y"
{
        yyval.interm = yyvsp[0].interm;
        if (parseContext.paramErrorCheck(yyvsp[0].interm.line, yyvsp[-2].interm.type.qualifier, yyvsp[-1].interm.qualifier, yyval.interm.param.type))
            parseContext.recover();
    ;
    break;}
case 102:
#line 1421 "hlslang.y"
{
        yyval.interm = yyvsp[0].interm;
        if (parseContext.parameterSamplerErrorCheck(yyvsp[0].interm.line, yyvsp[-1].interm.qualifier, *yyvsp[0].interm.param.type))
            parseContext.recover();
        if (parseContext.paramErrorCheck(yyvsp[0].interm.line, EvqTemporary, yyvsp[-1].interm.qualifier, yyval.interm.param.type))
            parseContext.recover();
    ;
    break;}
case 103:
#line 1431 "hlslang.y"
{
        yyval.interm.qualifier = EvqIn;
    ;
    break;}
case 104:
#line 1434 "hlslang.y"
{
        yyval.interm.qualifier = EvqIn;
    ;
    break;}
case 105:
#line 1437 "hlslang.y"
{
        yyval.interm.qualifier = EvqOut;
    ;
    break;}
case 106:
#line 1440 "hlslang.y"
{
        yyval.interm.qualifier = EvqInOut;
    ;
    break;}
case 107:
#line 1446 "hlslang.y"
{
        TParameter param = { 0, 0, new TType(yyvsp[0].interm.type) };
        yyval.interm.param = param;
    ;
    break;}
case 108:
#line 1453 "hlslang.y"
{
        yyval.interm = yyvsp[0].interm;
    ;
    break;}
case 109:
#line 1456 "hlslang.y"
{
        yyval.interm = yyvsp[-3].interm;
        if (parseContext.structQualifierErrorCheck(yyvsp[-1].lex.line, yyval.interm.type))
            parseContext.recover();
        
        if (parseContext.nonInitConstErrorCheck(yyvsp[-1].lex.line, *yyvsp[-1].lex.string, yyval.interm.type))
            parseContext.recover();

        if (parseContext.nonInitErrorCheck(yyvsp[-1].lex.line, *yyvsp[-1].lex.string, yyvsp[0].interm.typeInfo, yyval.interm.type))
            parseContext.recover();
    ;
    break;}
case 110:
#line 1467 "hlslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-5].interm.type))
            parseContext.recover();
            
        if (parseContext.nonInitConstErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-5].interm.type))
            parseContext.recover();

        yyval.interm = yyvsp[-5].interm;
        
        if (parseContext.arrayTypeErrorCheck(yyvsp[-2].lex.line, yyvsp[-5].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-2].lex.line, yyvsp[-5].interm.type))
            parseContext.recover();
        else {
            yyvsp[-5].interm.type.setArray(true);
            TVariable* variable;
            if (parseContext.arrayErrorCheck(yyvsp[-2].lex.line, *yyvsp[-3].lex.string, yyvsp[0].interm.typeInfo, yyvsp[-5].interm.type, variable))
                parseContext.recover();
        }
    ;
    break;}
case 111:
#line 1485 "hlslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-4].lex.line, yyvsp[-6].interm.type))
            parseContext.recover();
            
        if (parseContext.nonInitConstErrorCheck(yyvsp[-4].lex.line, *yyvsp[-4].lex.string, yyvsp[-6].interm.type))
            parseContext.recover();
        
        yyval.interm = yyvsp[-6].interm;

        if (parseContext.arrayTypeErrorCheck(yyvsp[-3].lex.line, yyvsp[-6].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-6].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-3].lex.line, yyvsp[-2].interm.intermTypedNode, size))
                parseContext.recover();
            yyvsp[-6].interm.type.setArray(true, size);        
            TVariable* variable;
            if (parseContext.arrayErrorCheck(yyvsp[-3].lex.line, *yyvsp[-4].lex.string, yyvsp[0].interm.typeInfo, yyvsp[-6].interm.type, variable))
                parseContext.recover();
        }
    ;
    break;}
case 112:
#line 1506 "hlslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-5].lex.line, yyvsp[-7].interm.type))
            parseContext.recover();
            
        yyval.interm = yyvsp[-7].interm;
            
        TVariable* variable = 0;
        if (parseContext.arrayTypeErrorCheck(yyvsp[-4].lex.line, yyvsp[-7].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-4].lex.line, yyvsp[-7].interm.type))
            parseContext.recover();
        else {
			yyvsp[-7].interm.type.setArray(true, yyvsp[0].interm.intermTypedNode->getType().getArraySize());
            if (parseContext.arrayErrorCheck(yyvsp[-4].lex.line, *yyvsp[-5].lex.string, yyvsp[-7].interm.type, variable))
                parseContext.recover();
        }

        {
            TIntermNode* intermNode;
            if (!parseContext.executeInitializer(yyvsp[-5].lex.line, *yyvsp[-5].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-7].interm.type, yyvsp[0].interm.intermTypedNode, intermNode, variable)) {
                //
                // build the intermediate representation
                //
                if (intermNode)
                    yyval.interm.intermAggregate = parseContext.intermediate.growAggregate(yyvsp[-7].interm.intermNode, intermNode, yyvsp[-1].lex.line);
                else
                    yyval.interm.intermAggregate = yyvsp[-7].interm.intermAggregate;
            } else {
                parseContext.recover();
                yyval.interm.intermAggregate = 0;
            }
        }
    ;
    break;}
case 113:
#line 1537 "hlslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-6].lex.line, yyvsp[-8].interm.type))
            parseContext.recover();
            
        yyval.interm = yyvsp[-8].interm;
            
        TVariable* variable = 0;
        if (parseContext.arrayTypeErrorCheck(yyvsp[-5].lex.line, yyvsp[-8].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-5].lex.line, yyvsp[-8].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-5].lex.line, yyvsp[-4].interm.intermTypedNode, size))
                parseContext.recover();
            yyvsp[-8].interm.type.setArray(true, size);
            if (parseContext.arrayErrorCheck(yyvsp[-5].lex.line, *yyvsp[-6].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-8].interm.type, variable))
                parseContext.recover();
        }

        {
            TIntermNode* intermNode;
            if (!parseContext.executeInitializer(yyvsp[-6].lex.line, *yyvsp[-6].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-8].interm.type, yyvsp[0].interm.intermTypedNode, intermNode, variable)) {
                //
                // build the intermediate representation
                //
                if (intermNode)
                    yyval.interm.intermAggregate = parseContext.intermediate.growAggregate(yyvsp[-8].interm.intermNode, intermNode, yyvsp[-1].lex.line);
                else
                    yyval.interm.intermAggregate = yyvsp[-8].interm.intermAggregate;
            } else {
                parseContext.recover();
                yyval.interm.intermAggregate = 0;
            }
        }
    ;
    break;}
case 114:
#line 1571 "hlslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-5].interm.type))
            parseContext.recover();
        
        yyval.interm = yyvsp[-5].interm;
        
        TIntermNode* intermNode;
	if ( !IsSampler(yyvsp[-5].interm.type.type)) {
	    if (!parseContext.executeInitializer(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-5].interm.type, yyvsp[0].interm.intermTypedNode, intermNode)) {
		//
		// build the intermediate representation
		//
		if (intermNode)
		    yyval.interm.intermAggregate = parseContext.intermediate.growAggregate(yyvsp[-5].interm.intermNode, intermNode, yyvsp[-1].lex.line);
		else
		    yyval.interm.intermAggregate = yyvsp[-5].interm.intermAggregate;
	    } else {
		parseContext.recover();
		yyval.interm.intermAggregate = 0;
	    }
	}
	else {
	    //Special code to skip initializers for samplers
	    yyval.interm = yyvsp[-5].interm;
	    if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, yyval.interm.type))
		parseContext.recover();
	    
	    if (parseContext.nonInitConstErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyval.interm.type))
		parseContext.recover();
	    
	    if (parseContext.nonInitErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-2].interm.typeInfo, yyval.interm.type))
		parseContext.recover();
	}
    ;
    break;}
case 115:
#line 1608 "hlslang.y"
{
        yyval.interm.type = yyvsp[0].interm.type;
        yyval.interm.intermAggregate = 0;
    ;
    break;}
case 116:
#line 1612 "hlslang.y"
{
        yyval.interm.intermAggregate = 0;
        yyval.interm.type = yyvsp[-2].interm.type;

        if (parseContext.structQualifierErrorCheck(yyvsp[-1].lex.line, yyval.interm.type))
            parseContext.recover();
        
        if (parseContext.nonInitConstErrorCheck(yyvsp[-1].lex.line, *yyvsp[-1].lex.string, yyval.interm.type))
            parseContext.recover();

        if (parseContext.nonInitErrorCheck(yyvsp[-1].lex.line, *yyvsp[-1].lex.string, yyvsp[0].interm.typeInfo, yyval.interm.type))
            parseContext.recover();
    ;
    break;}
case 117:
#line 1625 "hlslang.y"
{
        yyval.interm.intermAggregate = 0;
        if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-4].interm.type))
            parseContext.recover();

        if (parseContext.nonInitConstErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-4].interm.type))
            parseContext.recover();

        yyval.interm.type = yyvsp[-4].interm.type;

        if (parseContext.arrayTypeErrorCheck(yyvsp[-2].lex.line, yyvsp[-4].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-2].lex.line, yyvsp[-4].interm.type))
            parseContext.recover();
        else {
            yyvsp[-4].interm.type.setArray(true);        
            TVariable* variable;
            if (parseContext.arrayErrorCheck(yyvsp[-2].lex.line, *yyvsp[-3].lex.string, yyvsp[0].interm.typeInfo, yyvsp[-4].interm.type, variable))
                parseContext.recover();
        }
    ;
    break;}
case 118:
#line 1644 "hlslang.y"
{
        yyval.interm.intermAggregate = 0;
        if (parseContext.structQualifierErrorCheck(yyvsp[-4].lex.line, yyvsp[-5].interm.type))
            parseContext.recover();

        if (parseContext.nonInitConstErrorCheck(yyvsp[-4].lex.line, *yyvsp[-4].lex.string, yyvsp[-5].interm.type))
            parseContext.recover();
            
        yyval.interm.type = yyvsp[-5].interm.type;

        if (parseContext.arrayTypeErrorCheck(yyvsp[-3].lex.line, yyvsp[-5].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-5].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-3].lex.line, yyvsp[-2].interm.intermTypedNode, size))
                parseContext.recover();
            
            yyvsp[-5].interm.type.setArray(true, size);
            TVariable* variable;
            if (parseContext.arrayErrorCheck(yyvsp[-3].lex.line, *yyvsp[-4].lex.string, yyvsp[0].interm.typeInfo, yyvsp[-5].interm.type, variable))
                parseContext.recover();
        }
    ;
    break;}
case 119:
#line 1667 "hlslang.y"
{
        yyval.interm.intermAggregate = 0;

        if (parseContext.structQualifierErrorCheck(yyvsp[-5].lex.line, yyvsp[-6].interm.type))
            parseContext.recover();

        yyval.interm.type = yyvsp[-6].interm.type;

        TVariable* variable = 0;
        if (parseContext.arrayTypeErrorCheck(yyvsp[-4].lex.line, yyvsp[-6].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-4].lex.line, yyvsp[-6].interm.type))
            parseContext.recover();
        else {
            yyvsp[-6].interm.type.setArray(true, yyvsp[0].interm.intermTypedNode->getType().getArraySize());
            if (parseContext.arrayErrorCheck(yyvsp[-4].lex.line, *yyvsp[-5].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-6].interm.type, variable))
                parseContext.recover();
        }

        
	     {        
            TIntermNode* intermNode;
            if (!parseContext.executeInitializer(yyvsp[-5].lex.line, *yyvsp[-5].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-6].interm.type, yyvsp[0].interm.intermTypedNode, intermNode, variable)) {
                //
                // Build intermediate representation
                //
                if (intermNode)
                    yyval.interm.intermAggregate = parseContext.intermediate.makeAggregate(intermNode, yyvsp[-1].lex.line);
                else
                    yyval.interm.intermAggregate = 0;
            } else {
                parseContext.recover();
                yyval.interm.intermAggregate = 0;
            }
        }
    ;
    break;}
case 120:
#line 1701 "hlslang.y"
{
        yyval.interm.intermAggregate = 0;

        if (parseContext.structQualifierErrorCheck(yyvsp[-6].lex.line, yyvsp[-7].interm.type))
            parseContext.recover();

        yyval.interm.type = yyvsp[-7].interm.type;

        TVariable* variable = 0;
        if (parseContext.arrayTypeErrorCheck(yyvsp[-5].lex.line, yyvsp[-7].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-5].lex.line, yyvsp[-7].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-5].lex.line, yyvsp[-4].interm.intermTypedNode, size))
                parseContext.recover();
            
            yyvsp[-7].interm.type.setArray(true, size);
            if (parseContext.arrayErrorCheck(yyvsp[-5].lex.line, *yyvsp[-6].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-7].interm.type, variable))
                parseContext.recover();
        }
        
        {        
            TIntermNode* intermNode;
            if (!parseContext.executeInitializer(yyvsp[-6].lex.line, *yyvsp[-6].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-7].interm.type, yyvsp[0].interm.intermTypedNode, intermNode, variable)) {
                //
                // Build intermediate representation
                //
                if (intermNode)
                    yyval.interm.intermAggregate = parseContext.intermediate.makeAggregate(intermNode, yyvsp[-1].lex.line);
                else
                    yyval.interm.intermAggregate = 0;
            } else {
                parseContext.recover();
                yyval.interm.intermAggregate = 0;
            }
        }        
    ;
    break;}
case 121:
#line 1738 "hlslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-4].interm.type))
            parseContext.recover();

        yyval.interm.type = yyvsp[-4].interm.type;

        TIntermNode* intermNode;
	if ( !IsSampler(yyvsp[-4].interm.type.type)) {
	    if (!parseContext.executeInitializer(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-4].interm.type, yyvsp[0].interm.intermTypedNode, intermNode)) {
		//
		// Build intermediate representation
		//
		if (intermNode)
		    yyval.interm.intermAggregate = parseContext.intermediate.makeAggregate(intermNode, yyvsp[-1].lex.line);
		else
		    yyval.interm.intermAggregate = 0;
	    } else {
		parseContext.recover();
		yyval.interm.intermAggregate = 0;
	    }
	}
	else {
	    //Skip sampler initializers for now
	    yyval.interm.intermAggregate = 0;

	    if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, yyval.interm.type))
		parseContext.recover();
	    
	    if (parseContext.nonInitConstErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyval.interm.type))
		parseContext.recover();
	    
	    if (parseContext.nonInitErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-2].interm.typeInfo, yyval.interm.type))
		parseContext.recover();
	}
    ;
    break;}
case 122:
#line 1789 "hlslang.y"
{
        yyval.interm.type = yyvsp[0].interm.type;                       
    ;
    break;}
case 123:
#line 1792 "hlslang.y"
{                
        if (yyvsp[0].interm.type.array && parseContext.arrayQualifierErrorCheck(yyvsp[0].interm.type.line, yyvsp[-1].interm.type)) {
            parseContext.recover();
            yyvsp[0].interm.type.setArray(false);
        }
        
        if (yyvsp[-1].interm.type.qualifier == EvqAttribute &&
            (yyvsp[0].interm.type.type == EbtBool || yyvsp[0].interm.type.type == EbtInt)) {
            parseContext.error(yyvsp[0].interm.type.line, "cannot be bool or int", getQualifierString(yyvsp[-1].interm.type.qualifier), "");
            parseContext.recover();
        }
        if ((yyvsp[-1].interm.type.qualifier == EvqVaryingIn || yyvsp[-1].interm.type.qualifier == EvqVaryingOut) &&
            (yyvsp[0].interm.type.type == EbtBool || yyvsp[0].interm.type.type == EbtInt)) {
            parseContext.error(yyvsp[0].interm.type.line, "cannot be bool or int", getQualifierString(yyvsp[-1].interm.type.qualifier), "");
            parseContext.recover();
        }
        yyval.interm.type = yyvsp[0].interm.type; 
        yyval.interm.type.qualifier = yyvsp[-1].interm.type.qualifier;
    ;
    break;}
case 124:
#line 1814 "hlslang.y"
{
        yyval.interm.type.setBasic(EbtVoid, EvqConst, yyvsp[0].lex.line);
    ;
    break;}
case 125:
#line 1817 "hlslang.y"
{
        if (parseContext.globalErrorCheck(yyvsp[0].lex.line, parseContext.symbolTable.atGlobalLevel(), "static"))
            parseContext.recover();
        yyval.interm.type.setBasic(EbtVoid, EvqStatic, yyvsp[0].lex.line);
    ;
    break;}
case 126:
#line 1822 "hlslang.y"
{
        if (parseContext.globalErrorCheck(yyvsp[-1].lex.line, parseContext.symbolTable.atGlobalLevel(), "static const"))
            parseContext.recover();
        yyval.interm.type.setBasic(EbtVoid, EvqStaticConst, yyvsp[-1].lex.line);
    ;
    break;}
case 127:
#line 1827 "hlslang.y"
{ 
        VERTEX_ONLY("attribute", yyvsp[0].lex.line);
        if (parseContext.globalErrorCheck(yyvsp[0].lex.line, parseContext.symbolTable.atGlobalLevel(), "attribute"))
            parseContext.recover();
        yyval.interm.type.setBasic(EbtVoid, EvqAttribute, yyvsp[0].lex.line);
    ;
    break;}
case 128:
#line 1833 "hlslang.y"
{
        if (parseContext.globalErrorCheck(yyvsp[0].lex.line, parseContext.symbolTable.atGlobalLevel(), "varying"))
            parseContext.recover();
        if (parseContext.language == EShLangVertex)
            yyval.interm.type.setBasic(EbtVoid, EvqVaryingOut, yyvsp[0].lex.line);
        else
            yyval.interm.type.setBasic(EbtVoid, EvqVaryingIn, yyvsp[0].lex.line);
    ;
    break;}
case 129:
#line 1841 "hlslang.y"
{
        if (parseContext.globalErrorCheck(yyvsp[0].lex.line, parseContext.symbolTable.atGlobalLevel(), "uniform"))
            parseContext.recover();
        yyval.interm.type.setBasic(EbtVoid, EvqUniform, yyvsp[0].lex.line);
    ;
    break;}
case 130:
#line 1849 "hlslang.y"
{
        yyval.interm.type = yyvsp[0].interm.type;
    ;
    break;}
case 131:
#line 1852 "hlslang.y"
{
        yyval.interm.type = yyvsp[-3].interm.type;
        
        if (parseContext.arrayTypeErrorCheck(yyvsp[-2].lex.line, yyvsp[-3].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-2].lex.line, yyvsp[-1].interm.intermTypedNode, size))
                parseContext.recover();
            yyval.interm.type.setArray(true, size);
        }
    ;
    break;}
case 132:
#line 1867 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtVoid,EbpUndefined);
    ;
    break;}
case 133:
#line 1870 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
    ;
    break;}
case 134:
#line 1873 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
    ;
    break;}
case 135:
#line 1876 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
    ;
    break;}
case 136:
#line 1879 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtInt,EbpHigh);
    ;
    break;}
case 137:
#line 1882 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtBool,EbpHigh);
    ;
    break;}
case 138:
#line 1885 "hlslang.y"
{
        TQualifier qual = parseContext.getDefaultQualifier();
        if ( yyvsp[-1].lex.i > 4 || yyvsp[-1].lex.i < 1 ) {
            parseContext.error(yyvsp[-4].lex.line, "vector dimension out of range", "", "");
            parseContext.recover();
            yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[-5].lex.line);
        } else {
            yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[-5].lex.line);
            yyval.interm.type.setAggregate(yyvsp[-1].lex.i);
        }
    ;
    break;}
case 139:
#line 1896 "hlslang.y"
{
        TQualifier qual = parseContext.getDefaultQualifier();
        if ( yyvsp[-1].lex.i > 4 || yyvsp[-1].lex.i < 1 ) {
            parseContext.error(yyvsp[-4].lex.line, "vector dimension out of range", "", "");
            parseContext.recover();
            yyval.interm.type.setBasic(EbtInt, qual, yyvsp[-5].lex.line);
        } else {
            yyval.interm.type.setBasic(EbtInt, qual, yyvsp[-5].lex.line);
            yyval.interm.type.setAggregate(yyvsp[-1].lex.i);
        }
    ;
    break;}
case 140:
#line 1907 "hlslang.y"
{
        TQualifier qual = parseContext.getDefaultQualifier();
        if ( yyvsp[-1].lex.i > 4 || yyvsp[-1].lex.i < 1 ) {
            parseContext.error(yyvsp[-4].lex.line, "vector dimension out of range", "", "");
            parseContext.recover();
            yyval.interm.type.setBasic(EbtBool, qual, yyvsp[-5].lex.line);
        } else {
            yyval.interm.type.setBasic(EbtBool, qual, yyvsp[-5].lex.line);
            yyval.interm.type.setAggregate(yyvsp[-1].lex.i);
        }
    ;
    break;}
case 141:
#line 1918 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setAggregate(2);
    ;
    break;}
case 142:
#line 1922 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setAggregate(3);
    ;
    break;}
case 143:
#line 1926 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setAggregate(4);
    ;
    break;}
case 144:
#line 1930 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
        yyval.interm.type.setAggregate(2);
    ;
    break;}
case 145:
#line 1934 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
        yyval.interm.type.setAggregate(3);
    ;
    break;}
case 146:
#line 1938 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
        yyval.interm.type.setAggregate(4);
    ;
    break;}
case 147:
#line 1942 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
        yyval.interm.type.setAggregate(2);
    ;
    break;}
case 148:
#line 1946 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
        yyval.interm.type.setAggregate(3);
    ;
    break;}
case 149:
#line 1950 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
        yyval.interm.type.setAggregate(4);
    ;
    break;}
case 150:
#line 1954 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtBool,EbpHigh);
        yyval.interm.type.setAggregate(2);
    ;
    break;}
case 151:
#line 1958 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtBool,EbpHigh);
        yyval.interm.type.setAggregate(3);
    ;
    break;}
case 152:
#line 1962 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtBool,EbpHigh);
        yyval.interm.type.setAggregate(4);
    ;
    break;}
case 153:
#line 1966 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtInt,EbpHigh);
        yyval.interm.type.setAggregate(2);
    ;
    break;}
case 154:
#line 1970 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtInt,EbpHigh);
        yyval.interm.type.setAggregate(3);
    ;
    break;}
case 155:
#line 1974 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtInt,EbpHigh);
        yyval.interm.type.setAggregate(4);
    ;
    break;}
case 156:
#line 1978 "hlslang.y"
{
        FRAG_VERT_ONLY("mat2", yyvsp[0].lex.line); 
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setAggregate(2, true);
    ;
    break;}
case 157:
#line 1983 "hlslang.y"
{ 
        FRAG_VERT_ONLY("mat3", yyvsp[0].lex.line); 
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setAggregate(3, true);
    ;
    break;}
case 158:
#line 1988 "hlslang.y"
{ 
        FRAG_VERT_ONLY("mat4", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setAggregate(4, true);
    ;
    break;}
case 159:
#line 1993 "hlslang.y"
{
		FRAG_VERT_ONLY("mat2", yyvsp[0].lex.line);
		SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
		yyval.interm.type.setAggregate(2, true);
	;
    break;}
case 160:
#line 1998 "hlslang.y"
{ 
		FRAG_VERT_ONLY("mat3", yyvsp[0].lex.line);
		SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
		yyval.interm.type.setAggregate(3, true);
	;
    break;}
case 161:
#line 2003 "hlslang.y"
{ 
		FRAG_VERT_ONLY("mat4", yyvsp[0].lex.line);
		SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
		yyval.interm.type.setAggregate(4, true);
	;
    break;}
case 162:
#line 2008 "hlslang.y"
{
		FRAG_VERT_ONLY("mat2", yyvsp[0].lex.line);
		SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
		yyval.interm.type.setAggregate(2, true);
	;
    break;}
case 163:
#line 2013 "hlslang.y"
{ 
		FRAG_VERT_ONLY("mat3", yyvsp[0].lex.line);
		SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
		yyval.interm.type.setAggregate(3, true);
	;
    break;}
case 164:
#line 2018 "hlslang.y"
{ 
		FRAG_VERT_ONLY("mat4", yyvsp[0].lex.line);
		SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
		yyval.interm.type.setAggregate(4, true);
	;
    break;}
case 165:
#line 2023 "hlslang.y"
{
        FRAG_VERT_ONLY("texture", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtTexture,EbpUndefined);
    ;
    break;}
case 166:
#line 2027 "hlslang.y"
{
        FRAG_VERT_ONLY("sampler", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSamplerGeneric,EbpUndefined);
    ;
    break;}
case 167:
#line 2031 "hlslang.y"
{
        FRAG_VERT_ONLY("sampler1D", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSampler1D,EbpUndefined);
    ;
    break;}
case 168:
#line 2035 "hlslang.y"
{
        FRAG_VERT_ONLY("sampler2D", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSampler2D,EbpUndefined);
    ;
    break;}
case 169:
#line 2039 "hlslang.y"
{
        FRAG_VERT_ONLY("sampler3D", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSampler3D,EbpUndefined);
    ;
    break;}
case 170:
#line 2043 "hlslang.y"
{
        FRAG_VERT_ONLY("samplerCube", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSamplerCube,EbpUndefined);
    ;
    break;}
case 171:
#line 2047 "hlslang.y"
{
        FRAG_VERT_ONLY("samplerRECT", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSamplerRect,EbpUndefined);
    ;
    break;}
case 172:
#line 2051 "hlslang.y"
{
        FRAG_VERT_ONLY("sampler1DShadow", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSampler1DShadow,EbpUndefined);
    ;
    break;}
case 173:
#line 2055 "hlslang.y"
{
        FRAG_VERT_ONLY("sampler2DShadow", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSampler2DShadow,EbpUndefined);
    ;
    break;}
case 174:
#line 2059 "hlslang.y"
{
        FRAG_VERT_ONLY("struct", yyvsp[0].interm.type.line);
        yyval.interm.type = yyvsp[0].interm.type;
        yyval.interm.type.qualifier = parseContext.getDefaultQualifier();
    ;
    break;}
case 175:
#line 2064 "hlslang.y"
{     
        //
        // This is for user defined type names.  The lexical phase looked up the 
        // type.
        //
        TType& structure = static_cast<TVariable*>(yyvsp[0].lex.symbol)->getType();
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtStruct,EbpUndefined);
        yyval.interm.type.userDef = &structure;
    ;
    break;}
case 176:
#line 2076 "hlslang.y"
{
        TType* structure = new TType(yyvsp[-1].interm.typeList, *yyvsp[-3].lex.string, EbpUndefined, yyvsp[-3].lex.line);
        TVariable* userTypeDef = new TVariable(yyvsp[-3].lex.string, *structure, true);
        if (! parseContext.symbolTable.insert(*userTypeDef)) {
            parseContext.error(yyvsp[-3].lex.line, "redefinition", yyvsp[-3].lex.string->c_str(), "struct");
            parseContext.recover();
        }
        yyval.interm.type.setBasic(EbtStruct, EvqTemporary, yyvsp[-4].lex.line);
        yyval.interm.type.userDef = structure;
    ;
    break;}
case 177:
#line 2086 "hlslang.y"
{
        TType* structure = new TType(yyvsp[-1].interm.typeList, TString(""), EbpUndefined, yyvsp[-3].lex.line);
        yyval.interm.type.setBasic(EbtStruct, EvqTemporary, yyvsp[-3].lex.line);
        yyval.interm.type.userDef = structure;
    ;
    break;}
case 178:
#line 2094 "hlslang.y"
{
        yyval.interm.typeList = yyvsp[0].interm.typeList;
    ;
    break;}
case 179:
#line 2097 "hlslang.y"
{
        yyval.interm.typeList = yyvsp[-1].interm.typeList;
        for (unsigned int i = 0; i < yyvsp[0].interm.typeList->size(); ++i) {
            for (unsigned int j = 0; j < yyval.interm.typeList->size(); ++j) {
                if ((*yyval.interm.typeList)[j].type->getFieldName() == (*yyvsp[0].interm.typeList)[i].type->getFieldName()) {
                    parseContext.error((*yyvsp[0].interm.typeList)[i].line, "duplicate field name in structure:", "struct", (*yyvsp[0].interm.typeList)[i].type->getFieldName().c_str());
                    parseContext.recover();
                }
            }
            yyval.interm.typeList->push_back((*yyvsp[0].interm.typeList)[i]);
        }
    ;
    break;}
case 180:
#line 2112 "hlslang.y"
{
        yyval.interm.typeList = yyvsp[-1].interm.typeList;
        
        if (parseContext.voidErrorCheck(yyvsp[-2].interm.type.line, (*yyvsp[-1].interm.typeList)[0].type->getFieldName(), yyvsp[-2].interm.type)) {
            parseContext.recover();
        }
        for (unsigned int i = 0; i < yyval.interm.typeList->size(); ++i) {
            //
            // Careful not to replace already know aspects of type, like array-ness
            //
            TType* type = (*yyval.interm.typeList)[i].type;
            type->setBasicType(yyvsp[-2].interm.type.type);
            type->setPrecision(yyvsp[-2].interm.type.precision);
            type->setNominalSize(yyvsp[-2].interm.type.size);
            type->setMatrix(yyvsp[-2].interm.type.matrix);
            
            // don't allow arrays of arrays
            if (type->isArray()) {
                if (parseContext.arrayTypeErrorCheck(yyvsp[-2].interm.type.line, yyvsp[-2].interm.type))
                    parseContext.recover();
            }
            if (yyvsp[-2].interm.type.array)
                type->setArraySize(yyvsp[-2].interm.type.arraySize);
            if (yyvsp[-2].interm.type.userDef) {
                type->setStruct(yyvsp[-2].interm.type.userDef->getStruct());
                type->setTypeName(yyvsp[-2].interm.type.userDef->getTypeName());
            }
        }
    ;
    break;}
case 181:
#line 2144 "hlslang.y"
{
        yyval.interm.typeList = NewPoolTTypeList();
        yyval.interm.typeList->push_back(yyvsp[0].interm.typeLine);
    ;
    break;}
case 182:
#line 2148 "hlslang.y"
{
        yyval.interm.typeList->push_back(yyvsp[0].interm.typeLine);
    ;
    break;}
case 183:
#line 2154 "hlslang.y"
{
        yyval.interm.typeLine.type = new TType(EbtVoid, EbpUndefined);
        yyval.interm.typeLine.line = yyvsp[0].lex.line;
        yyval.interm.typeLine.type->setFieldName(*yyvsp[0].lex.string);
    ;
    break;}
case 184:
#line 2159 "hlslang.y"
{
        yyval.interm.typeLine.type = new TType(EbtVoid, EbpUndefined);
        yyval.interm.typeLine.line = yyvsp[-2].lex.line;
        yyval.interm.typeLine.type->setFieldName(*yyvsp[-2].lex.string);
        yyval.interm.typeLine.type->setSemantic(*yyvsp[0].lex.string);
    ;
    break;}
case 185:
#line 2165 "hlslang.y"
{
        yyval.interm.typeLine.type = new TType(EbtVoid, EbpUndefined);
        yyval.interm.typeLine.line = yyvsp[-3].lex.line;
        yyval.interm.typeLine.type->setFieldName(*yyvsp[-3].lex.string);
        
        int size;
        if (parseContext.arraySizeErrorCheck(yyvsp[-2].lex.line, yyvsp[-1].interm.intermTypedNode, size))
            parseContext.recover();
        yyval.interm.typeLine.type->setArraySize(size);
    ;
    break;}
case 186:
#line 2175 "hlslang.y"
{
        yyval.interm.typeLine.type = new TType(EbtVoid, EbpUndefined);
        yyval.interm.typeLine.line = yyvsp[-5].lex.line;
        yyval.interm.typeLine.type->setFieldName(*yyvsp[-5].lex.string);
        
        int size;
        if (parseContext.arraySizeErrorCheck(yyvsp[-4].lex.line, yyvsp[-3].interm.intermTypedNode, size))
            parseContext.recover();
        yyval.interm.typeLine.type->setArraySize(size);
        yyval.interm.typeLine.type->setSemantic(*yyvsp[0].lex.string);
    ;
    break;}
case 187:
#line 2191 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 188:
#line 2192 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 189:
#line 2193 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 190:
#line 2197 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 191:
#line 2201 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermAggregate; ;
    break;}
case 192:
#line 2202 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 193:
#line 2208 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 194:
#line 2209 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 195:
#line 2210 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 196:
#line 2211 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 197:
#line 2212 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 198:
#line 2216 "hlslang.y"
{ yyval.interm.intermAggregate = 0; ;
    break;}
case 199:
#line 2217 "hlslang.y"
{ parseContext.symbolTable.push(); ;
    break;}
case 200:
#line 2217 "hlslang.y"
{ parseContext.symbolTable.pop(); ;
    break;}
case 201:
#line 2217 "hlslang.y"
{
        if (yyvsp[-2].interm.intermAggregate != 0)            
            yyvsp[-2].interm.intermAggregate->setOperator(EOpSequence); 
        yyval.interm.intermAggregate = yyvsp[-2].interm.intermAggregate;
    ;
    break;}
case 202:
#line 2225 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 203:
#line 2226 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 204:
#line 2231 "hlslang.y"
{ 
        yyval.interm.intermNode = 0; 
    ;
    break;}
case 205:
#line 2234 "hlslang.y"
{ 
        if (yyvsp[-1].interm.intermAggregate)
            yyvsp[-1].interm.intermAggregate->setOperator(EOpSequence); 
        yyval.interm.intermNode = yyvsp[-1].interm.intermAggregate; 
    ;
    break;}
case 206:
#line 2242 "hlslang.y"
{
        yyval.interm.intermAggregate = parseContext.intermediate.makeAggregate(yyvsp[0].interm.intermNode, 0); 
    ;
    break;}
case 207:
#line 2245 "hlslang.y"
{ 
        yyval.interm.intermAggregate = parseContext.intermediate.growAggregate(yyvsp[-1].interm.intermAggregate, yyvsp[0].interm.intermNode, 0);
    ;
    break;}
case 208:
#line 2251 "hlslang.y"
{ yyval.interm.intermNode = 0; ;
    break;}
case 209:
#line 2252 "hlslang.y"
{ yyval.interm.intermNode = static_cast<TIntermNode*>(yyvsp[-1].interm.intermTypedNode); ;
    break;}
case 210:
#line 2256 "hlslang.y"
{ 
        if (parseContext.boolErrorCheck(yyvsp[-4].lex.line, yyvsp[-2].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermNode = parseContext.intermediate.addSelection(yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.nodePair, yyvsp[-4].lex.line);
    ;
    break;}
case 211:
#line 2264 "hlslang.y"
{
        yyval.interm.nodePair.node1 = yyvsp[-2].interm.intermNode;
        yyval.interm.nodePair.node2 = yyvsp[0].interm.intermNode;
    ;
    break;}
case 212:
#line 2268 "hlslang.y"
{ 
        yyval.interm.nodePair.node1 = yyvsp[0].interm.intermNode;
        yyval.interm.nodePair.node2 = 0;
    ;
    break;}
case 213:
#line 2278 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        if (parseContext.boolErrorCheck(yyvsp[0].interm.intermTypedNode->getLine(), yyvsp[0].interm.intermTypedNode))
            parseContext.recover();          
    ;
    break;}
case 214:
#line 2283 "hlslang.y"
{
        TIntermNode* intermNode;
        if (parseContext.structQualifierErrorCheck(yyvsp[-2].lex.line, yyvsp[-3].interm.type))
            parseContext.recover();
        if (parseContext.boolErrorCheck(yyvsp[-2].lex.line, yyvsp[-3].interm.type))
            parseContext.recover();
        
        if (!parseContext.executeInitializer(yyvsp[-2].lex.line, *yyvsp[-2].lex.string, yyvsp[-3].interm.type, yyvsp[0].interm.intermTypedNode, intermNode))
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        else {
            parseContext.recover();
            yyval.interm.intermTypedNode = 0;
        }
    ;
    break;}
case 215:
#line 2300 "hlslang.y"
{ parseContext.symbolTable.push(); ++parseContext.loopNestingLevel; ;
    break;}
case 216:
#line 2300 "hlslang.y"
{ 
        parseContext.symbolTable.pop();
        yyval.interm.intermNode = parseContext.intermediate.addLoop(yyvsp[0].interm.intermNode, yyvsp[-2].interm.intermTypedNode, 0, true, yyvsp[-5].lex.line);
        --parseContext.loopNestingLevel;
    ;
    break;}
case 217:
#line 2305 "hlslang.y"
{ ++parseContext.loopNestingLevel; ;
    break;}
case 218:
#line 2305 "hlslang.y"
{
        if (parseContext.boolErrorCheck(yyvsp[0].lex.line, yyvsp[-2].interm.intermTypedNode))
            parseContext.recover();
                    
        yyval.interm.intermNode = parseContext.intermediate.addLoop(yyvsp[-5].interm.intermNode, yyvsp[-2].interm.intermTypedNode, 0, false, yyvsp[-4].lex.line);
        --parseContext.loopNestingLevel;
    ;
    break;}
case 219:
#line 2312 "hlslang.y"
{ parseContext.symbolTable.push(); ++parseContext.loopNestingLevel; ;
    break;}
case 220:
#line 2312 "hlslang.y"
{
        parseContext.symbolTable.pop();
        yyval.interm.intermNode = parseContext.intermediate.makeAggregate(yyvsp[-3].interm.intermNode, yyvsp[-5].lex.line);
        yyval.interm.intermNode = parseContext.intermediate.growAggregate(
                yyval.interm.intermNode,
                parseContext.intermediate.addLoop(yyvsp[0].interm.intermNode, reinterpret_cast<TIntermTyped*>(yyvsp[-2].interm.nodePair.node1), reinterpret_cast<TIntermTyped*>(yyvsp[-2].interm.nodePair.node2), true, yyvsp[-6].lex.line),
                yyvsp[-6].lex.line);
        yyval.interm.intermNode->getAsAggregate()->setOperator(EOpSequence);
        --parseContext.loopNestingLevel;
    ;
    break;}
case 221:
#line 2325 "hlslang.y"
{
        yyval.interm.intermNode = yyvsp[0].interm.intermNode; 
    ;
    break;}
case 222:
#line 2328 "hlslang.y"
{
        yyval.interm.intermNode = yyvsp[0].interm.intermNode;
    ;
    break;}
case 223:
#line 2334 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; 
    ;
    break;}
case 224:
#line 2337 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = 0; 
    ;
    break;}
case 225:
#line 2343 "hlslang.y"
{ 
        yyval.interm.nodePair.node1 = yyvsp[-1].interm.intermTypedNode;
        yyval.interm.nodePair.node2 = 0;
    ;
    break;}
case 226:
#line 2347 "hlslang.y"
{
        yyval.interm.nodePair.node1 = yyvsp[-2].interm.intermTypedNode;
        yyval.interm.nodePair.node2 = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 227:
#line 2354 "hlslang.y"
{
        if (parseContext.loopNestingLevel <= 0) {
            parseContext.error(yyvsp[-1].lex.line, "continue statement only allowed in loops", "", "");
            parseContext.recover();
        }        
        yyval.interm.intermNode = parseContext.intermediate.addBranch(EOpContinue, yyvsp[-1].lex.line);
    ;
    break;}
case 228:
#line 2361 "hlslang.y"
{
        if (parseContext.loopNestingLevel <= 0) {
            parseContext.error(yyvsp[-1].lex.line, "break statement only allowed in loops", "", "");
            parseContext.recover();
        }        
        yyval.interm.intermNode = parseContext.intermediate.addBranch(EOpBreak, yyvsp[-1].lex.line);
    ;
    break;}
case 229:
#line 2368 "hlslang.y"
{
        yyval.interm.intermNode = parseContext.intermediate.addBranch(EOpReturn, yyvsp[-1].lex.line);
        if (parseContext.currentFunctionType->getBasicType() != EbtVoid) {
            parseContext.error(yyvsp[-1].lex.line, "non-void function must return a value", "return", "");
            parseContext.recover();
        }
    ;
    break;}
case 230:
#line 2375 "hlslang.y"
{        
        TIntermTyped *temp = yyvsp[-1].interm.intermTypedNode;
        if (parseContext.currentFunctionType->getBasicType() == EbtVoid) {
            parseContext.error(yyvsp[-2].lex.line, "void function cannot return a value", "return", "");
            parseContext.recover();
        } else if (*(parseContext.currentFunctionType) != yyvsp[-1].interm.intermTypedNode->getType()) {
            TOperator op = parseContext.getConstructorOp( *(parseContext.currentFunctionType));
            if ( op != EOpNull)
                temp = parseContext.constructBuiltIn( (parseContext.currentFunctionType), op, yyvsp[-1].interm.intermTypedNode, yyvsp[-2].lex.line, false);
            else
                temp = 0;
            if ( temp == 0) {
                parseContext.error(yyvsp[-2].lex.line, "function return is not matching type:", "return", "");
                parseContext.recover();
                temp = yyvsp[-1].interm.intermTypedNode;
            }
        }
        yyval.interm.intermNode = parseContext.intermediate.addBranch(EOpReturn, temp, yyvsp[-2].lex.line);
        parseContext.functionReturnsValue = true;
    ;
    break;}
case 231:
#line 2395 "hlslang.y"
{
        FRAG_ONLY("discard", yyvsp[-1].lex.line);
        yyval.interm.intermNode = parseContext.intermediate.addBranch(EOpKill, yyvsp[-1].lex.line);
    ;
    break;}
case 232:
#line 2404 "hlslang.y"
{ 
        yyval.interm.intermNode = yyvsp[0].interm.intermNode; 
        parseContext.treeRoot = yyval.interm.intermNode; 
    ;
    break;}
case 233:
#line 2408 "hlslang.y"
{
        yyval.interm.intermNode = parseContext.intermediate.growAggregate(yyvsp[-1].interm.intermNode, yyvsp[0].interm.intermNode, 0);
        parseContext.treeRoot = yyval.interm.intermNode;
    ;
    break;}
case 234:
#line 2415 "hlslang.y"
{ 
        yyval.interm.intermNode = yyvsp[0].interm.intermNode; 
    ;
    break;}
case 235:
#line 2418 "hlslang.y"
{ 
        yyval.interm.intermNode = yyvsp[0].interm.intermNode; 
    ;
    break;}
case 236:
#line 2421 "hlslang.y"
{ yyval.interm.intermNode = 0; ;
    break;}
case 237:
#line 2425 "hlslang.y"
{
        TFunction& function = *(yyvsp[0].interm.function);
        TFunction* prevDec = static_cast<TFunction*>(parseContext.symbolTable.find(function.getMangledName()));
        //
        // Note:  'prevDec' could be 'function' if this is the first time we've seen function
        // as it would have just been put in the symbol table.  Otherwise, we're looking up
        // an earlier occurance.
        //
        if (prevDec->isDefined()) {
            //
            // Then this function already has a body.
            //
            parseContext.error(yyvsp[0].interm.line, "function already has a body", function.getName().c_str(), "");
            parseContext.recover();
        }
        prevDec->setDefined();
        
        //
        // Raise error message if main function takes any parameters or return anything other than void
        //
        /* TODO: this is unneeded for HLSL, but it might need to name mangle 
        if (function.getName() == "main") {
            if (function.getParamCount() > 0) {
                parseContext.error($1.line, "function cannot take any parameter(s)", function.getName().c_str(), "");
                parseContext.recover();
            }
            if (function.getReturnType().getBasicType() != EbtVoid) {
                parseContext.error($1.line, "", function.getReturnType().getBasicString(), "main function cannot return a value");
                parseContext.recover();
            }            
        }
        */
   
        //
        // New symbol table scope for body of function plus its arguments
        //
        parseContext.symbolTable.push();
        
        //
        // Remember the return type for later checking for RETURN statements.
        //
        parseContext.currentFunctionType = &(prevDec->getReturnType());
        parseContext.functionReturnsValue = false;
        
        // 
        // Insert parameters into the symbol table.
        // If the parameter has no name, it's not an error, just don't insert it 
        // (could be used for unused args).
        //
        // Also, accumulate the list of parameters into the HIL, so lower level code
        // knows where to find parameters.
        //
        TIntermAggregate* paramNodes = new TIntermAggregate;
        for (int i = 0; i < function.getParamCount(); i++) {
            TParameter& param = function[i];
            if (param.name != 0) {
                TVariable *variable = new TVariable(param.name, param.info, *param.type);
                // 
                // Insert the parameters with name in the symbol table.
                //
                if (! parseContext.symbolTable.insert(*variable)) {
                    parseContext.error(yyvsp[0].interm.line, "redefinition", variable->getName().c_str(), "");
                    parseContext.recover();
                    delete variable;
                }
                //
                // Transfer ownership of name pointer to symbol table.
                //
                param.name = 0;
                
                //
                // Add the parameter to the HIL
                //                
                paramNodes = parseContext.intermediate.growAggregate(
                                               paramNodes, 
                                               parseContext.intermediate.addSymbol(variable->getUniqueId(),
                                                                       variable->getName(),
                                                                       variable->getInfo(),
                                                                       variable->getType(), yyvsp[0].interm.line), 
                                               yyvsp[0].interm.line);
            } else {
                paramNodes = parseContext.intermediate.growAggregate(paramNodes, parseContext.intermediate.addSymbol(0, "", param.info, *param.type, yyvsp[0].interm.line), yyvsp[0].interm.line);
            }
        }
        parseContext.intermediate.setAggregateOperator(paramNodes, EOpParameters, yyvsp[0].interm.line);
        yyvsp[0].interm.intermAggregate = paramNodes;
        parseContext.loopNestingLevel = 0;
    ;
    break;}
case 238:
#line 2513 "hlslang.y"
{
        //?? Check that all paths return a value if return type != void ?
        //   May be best done as post process phase on intermediate code
        if (parseContext.currentFunctionType->getBasicType() != EbtVoid && ! parseContext.functionReturnsValue) {
            parseContext.error(yyvsp[-2].interm.line, "function does not return a value:", "", yyvsp[-2].interm.function->getName().c_str());
            parseContext.recover();
        }
        parseContext.symbolTable.pop();
        yyval.interm.intermNode = parseContext.intermediate.growAggregate(yyvsp[-2].interm.intermAggregate, yyvsp[0].interm.intermNode, 0);
        parseContext.intermediate.setAggregateOperator(yyval.interm.intermNode, EOpFunction, yyvsp[-2].interm.line);
        yyval.interm.intermNode->getAsAggregate()->setName(yyvsp[-2].interm.function->getMangledName().c_str());
        yyval.interm.intermNode->getAsAggregate()->setPlainName(yyvsp[-2].interm.function->getName().c_str());
        yyval.interm.intermNode->getAsAggregate()->setType(yyvsp[-2].interm.function->getReturnType());
        
	if ( yyvsp[-2].interm.function->getInfo())
	    yyval.interm.intermNode->getAsAggregate()->setSemantic(yyvsp[-2].interm.function->getInfo()->getSemantic());
    ;
    break;}
case 239:
#line 2533 "hlslang.y"
{
       yyval.interm.intermTypedNode = yyvsp[-1].interm.intermAggregate;
    ;
    break;}
case 240:
#line 2536 "hlslang.y"
{
       yyval.interm.intermTypedNode = yyvsp[-2].interm.intermAggregate;
    ;
    break;}
case 241:
#line 2543 "hlslang.y"
{
        //create a new aggNode
       yyval.interm.intermAggregate = parseContext.intermediate.makeAggregate( yyvsp[0].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode->getLine());       
    ;
    break;}
case 242:
#line 2547 "hlslang.y"
{
       //take the inherited aggNode and return it
       yyval.interm.intermAggregate = yyvsp[0].interm.intermTypedNode->getAsAggregate();       
    ;
    break;}
case 243:
#line 2551 "hlslang.y"
{
        // append to the aggNode
       yyval.interm.intermAggregate = parseContext.intermediate.growAggregate( yyvsp[-2].interm.intermAggregate, yyvsp[0].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode->getLine());       
    ;
    break;}
case 244:
#line 2555 "hlslang.y"
{
       // append all children or $3 to $1 
       yyval.interm.intermAggregate = parseContext.mergeAggregates( yyvsp[-2].interm.intermAggregate, yyvsp[0].interm.intermTypedNode->getAsAggregate());
    ;
    break;}
case 245:
#line 2562 "hlslang.y"
{
        //empty annotation
	  yyval.interm.ann = 0;
    ;
    break;}
case 246:
#line 2566 "hlslang.y"
{
      yyval.interm.ann = yyvsp[-1].interm.ann;
    ;
    break;}
case 247:
#line 2572 "hlslang.y"
{
        yyval.interm.ann = new TAnnotation;
	yyval.interm.ann->addKey( *yyvsp[0].lex.string);
    ;
    break;}
case 248:
#line 2576 "hlslang.y"
{
        yyvsp[-1].interm.ann->addKey( *yyvsp[0].lex.string);
	yyval.interm.ann = yyvsp[-1].interm.ann;
    ;
    break;}
case 249:
#line 2583 "hlslang.y"
{
        yyval.lex.string = yyvsp[-3].lex.string;
    ;
    break;}
case 250:
#line 2589 "hlslang.y"
{;
    break;}
case 251:
#line 2590 "hlslang.y"
{;
    break;}
case 252:
#line 2591 "hlslang.y"
{;
    break;}
case 253:
#line 2592 "hlslang.y"
{;
    break;}
case 254:
#line 2593 "hlslang.y"
{;
    break;}
case 255:
#line 2594 "hlslang.y"
{;
    break;}
case 256:
#line 2595 "hlslang.y"
{;
    break;}
case 257:
#line 2596 "hlslang.y"
{;
    break;}
case 258:
#line 2597 "hlslang.y"
{;
    break;}
case 259:
#line 2598 "hlslang.y"
{;
    break;}
case 260:
#line 2599 "hlslang.y"
{;
    break;}
case 261:
#line 2600 "hlslang.y"
{;
    break;}
case 262:
#line 2601 "hlslang.y"
{;
    break;}
case 263:
#line 2602 "hlslang.y"
{;
    break;}
case 264:
#line 2603 "hlslang.y"
{;
    break;}
case 265:
#line 2604 "hlslang.y"
{;
    break;}
case 266:
#line 2605 "hlslang.y"
{;
    break;}
case 267:
#line 2606 "hlslang.y"
{;
    break;}
case 268:
#line 2607 "hlslang.y"
{;
    break;}
case 269:
#line 2608 "hlslang.y"
{;
    break;}
case 270:
#line 2609 "hlslang.y"
{;
    break;}
case 271:
#line 2613 "hlslang.y"
{;
    break;}
case 272:
#line 2614 "hlslang.y"
{;
    break;}
case 273:
#line 2615 "hlslang.y"
{;
    break;}
case 274:
#line 2616 "hlslang.y"
{;
    break;}
case 275:
#line 2620 "hlslang.y"
{
    yyval.lex.f = (float)yyvsp[0].lex.i;
;
    break;}
case 276:
#line 2623 "hlslang.y"
{
    yyval.lex.f = (yyvsp[0].lex.b) ? 1.0f : 0.0f;
;
    break;}
case 277:
#line 2626 "hlslang.y"
{
    yyval.lex = yyvsp[0].lex;
;
    break;}
case 278:
#line 2632 "hlslang.y"
{;
    break;}
case 279:
#line 2636 "hlslang.y"
{;
    break;}
case 280:
#line 2637 "hlslang.y"
{;
    break;}
case 281:
#line 2641 "hlslang.y"
{;
    break;}
case 282:
#line 2645 "hlslang.y"
{
        // This is being thrown away
    ;
    break;}
case 283:
#line 2651 "hlslang.y"
{ yyval.lex.string = yyvsp[0].lex.string;;
    break;}
case 284:
#line 2655 "hlslang.y"
{ yyval.interm.typeInfo = 0;;
    break;}
case 285:
#line 2656 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( *yyvsp[0].lex.string, 0); ;
    break;}
case 286:
#line 2657 "hlslang.y"
{ yyval.interm.typeInfo = 0; ;
    break;}
case 287:
#line 2658 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( "", yyvsp[0].interm.ann); ;
    break;}
case 288:
#line 2659 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( *yyvsp[-1].lex.string, yyvsp[0].interm.ann); ;
    break;}
case 289:
#line 2660 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( *yyvsp[-1].lex.string, 0); ;
    break;}
case 290:
#line 2661 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( "", yyvsp[0].interm.ann); ;
    break;}
case 291:
#line 2662 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( *yyvsp[-2].lex.string, yyvsp[0].interm.ann); ;
    break;}
case 292:
#line 2666 "hlslang.y"
{
    constUnion *cUnion = new constUnion[1];
    cUnion[0].setFConst(0.0f);
    yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion( cUnion, TType(EbtFloat, EbpUndefined, EvqConst, 1), yyvsp[-3].lex.line);
;
    break;}
case 293:
#line 2671 "hlslang.y"
{
;
    break;}
case 294:
#line 2676 "hlslang.y"
{
;
    break;}
case 295:
#line 2678 "hlslang.y"
{
;
    break;}
case 296:
#line 2683 "hlslang.y"
{;
    break;}
case 297:
#line 2684 "hlslang.y"
{;
    break;}
case 298:
#line 2685 "hlslang.y"
{;
    break;}
case 299:
#line 2686 "hlslang.y"
{;
    break;}
case 300:
#line 2687 "hlslang.y"
{;
    break;}
case 301:
#line 2688 "hlslang.y"
{;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 2691 "hlslang.y"

